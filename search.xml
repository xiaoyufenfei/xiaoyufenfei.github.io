<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[科研工具]]></title>
    <url>%2F2019%2F08%2F27%2F%E7%A7%91%E7%A0%94%E5%B7%A5%E5%85%B7%2F</url>
    <content type="text"><![CDATA[Some tips for research and coding本博文正在丰富内容～～～😄 1. 科研起步必读文章 1.Karpathy-博士经验 (翻译) 重点 2.陈天奇-科研十年 3.王一-科研idea 4.王赟-我的八年博士生涯 5.李沐-博士这五年 6.毕业撒花 7.帝国理工-博士手册（Doctoral Milestones） 信息收集 1.Google Scholar 如何查询相关文章 2.Google Scholar 如何follow研究者 谷歌学术：https://www.google.com.hk 谷歌学术镜像：http://xilesou.99lb.net/ 、 https://xue.glgoo.org/ 3.计算机相关论文免翻墙直连检索DBLP 也可通过 https://dblp.uni-trier.de/ 访问. 4.arXiv预印本 http://arxiv.org/list/cs.CV/recent 看最近一周的论文; 使用http://arxiv.org/list/cs.CV/1704，可以查看17年04月的全部内容了; 使用http://arxiv.org/list/cs.CV/17，可以查看17年的所有内容，其余搜索也类似。 5.arXiv中国镜像 使用技巧：如 https://arxiv.org/pdf/1512.03385.pdf 下载很慢，换成 http://xxx.itp.ac.cn/pdf/1512.03385.pdf, 即可体验光速下载。注意 https 要换成 http 6.语义学者(Semantic Scholar)免费学术搜索引擎 7.arXiv-sanity人工智能论文检索引擎 8.arXiv-vanity将来自 arXiv 的论文渲染成响应式网页 9.arXiv链接中科院文献情报中心开发的arXiv文献检索平台 10.Papers With Code 自动把论文连接到实现代码的 GitHub 资源库和数据集，并根据 GitHub 的收藏量排序。每篇论文可能有多个合并的条目，可快速了解领域进展。 11.IEEE会议或期刊论文检索 12.sci-hub文献下载站 例如输入这个：https://ieeexplore.ieee.org/document/8070331/ 13.论文在线翻译网页-通天塔 14.2019-2020 International Conferences in Artificial Intelligence, Machine Learning, Computer Vision, Data Mining, Natural Language Processing and Robotics 15.mendeley 文章整理APP 科研必备的浏览器插件+文献工具：链接：https://pan.baidu.com/s/1w2Xa30hOvo1aMhpiJCmceg 提取码：7j6b TeXstudio + TeX Live论文撰写工具礼包：链接：https://pan.baidu.com/share/init?surl=5dYyDflQCPVz_jlwEkngUw 提取码：hz3r 16.2019 CVPR Accepted Papers分类检索 17.深度学习500问 其他 1.蓝灯 邀请码 Y238YKH 2.旋风 APP 2. Github Github历史和目的 创建账号 建立Repository git init 初始化 git add xxx.txt 添加xxx.txt到git git add -A 添加所有文件到git git commit -m “hahahah” 添加注释 git push 上传更新 git clone https://github.com/account/repository.git git status 查询状态 如何在网站上修改 git pull 与Github同步 git branch 查看branch git branch -a 查看所有branch git branch new 创建branch名为new git checkout new 进入new branch git checkout master 返回主branch git checkout -b new2 创建并进入branch名为new2 修改branch后，commit到Github上，如何在github上发起Push Request .gitignore 自定义不能被添加的文件 添加collaborator 新建organization 练习：建立自己的个人主页 3. GPU 目的 nvidia-smi 查看GPU使用情况 watch -n 1 nvidia-smi：每秒钟刷新GPU使用情况 sudo fuser -v /dev/nvidia* 查看GPU使用者 sudo kill -9 PID 杀掉进程 CUDA_VISIBLE_DEVICES=0 python xxx.py 指定GPU0 CUDA_VISIBLE_DEVICES=0,1 python xxx.py 指定GPU0和1 CUDA_VISIBLE_DEVICES=“” python xxx.py 不使用GPU python xxx.py &gt; train.log &amp; 把输出放入train.log（&gt;）; 不显示输出（&amp;） CPU &amp; GPU top htop 深度学习GPU环境搭建全家桶 4. Screen 目的：关闭当前Terminal/命令窗口，程序依然进行。 screen -S name 创建screen，并进入 screen -ls 查看screen列表 screen -r name 进入screen ctrl+A+D 退出当前screen screen -d name 关闭screen screen -X -S name kill 删除screen 5. Virtualenv 目的 Installation pip3 install virtualenv 安装virtualenv virtualenv env 新建环境 source env/bin/activate 进入环境 deactivate 退出环境 6. 文档 Markdown Typora Readthedoc https://github.com/tensorlayer/tensorlayer/tree/master/docs https://tensorlayer.readthedocs.io RST and Sphinx syntax 7. 远程连接 MacOS - Cyberduck Windows - MobaXterm PyCharm TeamViewer 8. TensorLayer Installation Dynamic and Static Models 、 Advanced Features 、 Data Augmentation Basic Tutorials CIFAR10 has data augmentation A Good Project Template RL Tutorials for Research / for Production PyTorch深度网络逐层性能分析器 9. Deep Learning 等 NIPS 19 Subject Areas CVPR 19 Program Guide CVPR 19 Paper list / oral list SIGGRAPH 19 Technical Papers Fast Forward/ Paper List zsdonghao/deep-learning-note Distributed Training TingFlow 教学性DL框架 模型结构可视化神器 - Netron 线Netron网址: https://lutzroeder.github.io/netron/ 10. Publishing Paper Conference DDL Grammarly 查语法错误 Overleaf 协同编辑 LaTeX: MacTex TeXLive + TexStudio等软件资源站点 Best tool for using LaTeX locally: VSCode + LaTeX Workshop]]></content>
      <categories>
        <category>科研工具</category>
      </categories>
      <tags>
        <tag>科研工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[深度学习GPU环境搭建]]></title>
    <url>%2F2019%2F08%2F26%2F%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0GPU%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[为了加速神经网络的训练，使用CPU训练速度很慢，所以使用cuda和cudnn对神经网络进行加速，在配置的过程中你会遇到很多坑，各种坑，网上也有很多教程但是实现起来各种ERROR，真心觉得累，经过多次实验做如下超全总结！！！ 本节详细说明一下深度学习环境配置，深度学习GPU环境搭建全家桶 Python 3.6首先安装 Python 3.6，这里使用 Anaconda 3 来安装，下载地址：https://www.anaconda.com/download/#linux，点击 Download 按钮下载即可，这里下载的是 Anaconda 3-5.1 版本，如果下载速度过慢,强烈建议选择使用清华镜像 。 下载下来之后目录下会出现一个 Anaconda3-5.1.0-Linux-x86_64.sh 文件，然后直接执行即可安装： 1bash Anaconda3-5.1.0-Linux-x86_64.sh 执行完毕之后按照默认设置走下来即可完成安装。 这里默认它会安装到用户目录下，如果想全局安装，可以在这一步输入你要安装的地址： 123456789Anaconda3 will now be installed into this location:/home/wy/anaconda3 - Press ENTER to confirm the location - Press CTRL-C to abort the installation - Or specify a different location below [/home/wy/anaconda3] &gt;&gt;&gt; /usr/local/anaconda3PREFIX=/usr/local/anaconda3 这里我指定了将其安装到 /usr/local/anaconda3 目录下，全局安装，所有用户共享，当然如果只想本用户使用的话使用默认配置即可。 安装完成之后添加 python3 和 pip3 的软链接： 12sudo ln -s /usr/local/anaconda3/bin/python3 /usr/local/sbin/python3sudo ln -s /usr/local/anaconda3/bin/pip /usr/local/sbin/pip3 这里是将软连接其添加到 /usr/local/sbin 目录下了，它默认会存在于环境变量中，因此可以直接调用。 当然也可以选择把 /usr/local/anaconda3/bin 目录添加到环境变量中，可以修改 ~/.bashrc 文件，添加如下内容： 1export PATH=/usr/local/anaconda3/bin$&#123;PATH:+:$&#123;PATH&#125;&#125; 然后执行： 1source ~/.bashrc 即可生效，下次登录时也会默认执行 ~/.bashrc 文件，也会生效。 接下来我们验证下 python3、pip3 命令是否都来自 Anaconda，命令如下： 12pip3 -Vpip 9.0.1 from /usr/local/anaconda3/lib/python3.6/site-packages (python 3.6) 1234567which python3/usr/local/anaconda3/bin/python3python3Python 3.6.4 |Anaconda, Inc.| (default, Jan 16 2018, 18:10:19) [GCC 7.2.0] on linuxType "help", "copyright", "credits" or "license" for more information.&gt;&gt;&gt; 如果输入 pip3 和 python3 命令能出现如上类似结果，路径都在 /usr/local/anaconda3，就证明 Python 3 安装成功了。 安装驱动首先查看一下自己的电脑需要怎样的驱动，我们可以先到 http://www.nvidia.com/Download/index.aspx 查询下我们需要的是怎样的驱动，这里我的显卡是 GTX 1080，所以以此为例说明，勾选好对应的配置： 点击 Search，可以看到查询结果如下所示： 12345Version: 390.25Release Date: 2018.1.29Operating System: Linux 64-bitLanguage: English (US)File Size: 77.48 MB 这里说明我们需要的版本是 390.25。 接下来如果我们之前安装了驱动的话，可以重新安装一下，如果当前已经安装好了就不必了。 如果要重装，需要首先卸载掉之前的显卡驱动: 1sudo apt-get remove –purge nvidia* 运行之后 NVIDIA 的一些驱动就被卸载了。 这时候 nvidia-smi 等命令已经不能用了，这就证明显卡驱动已经被卸载了。 然后接下来添加一个 PPA 源，命令如下： 1sudo add-apt-repository ppa:graphics-drivers/ppa 然后更新一下： 1sudo apt-get update 随后重新安装显卡驱动： 1sudo apt-get install nvidia-390 注意这里的 390 就是刚才我们查询出来的版本，以实际查询出来的版本为准。 CUDA 9.0如果存在之前的旧版本，可以选择先卸载，以免和新的 CUDA 版本产生冲突，在 /usr/local/cuda/bin 目录下有一个 uninstallcuda*.pl 文件，可以直接运行卸载，命令如下： 1sudo ./uninstall_cuda_*.pl 这样即可将 CUDA 全部卸载。 接下来我们再下载 CUDA 9.0，注意 TensorFlow 1.5 和 1.6 版本依然只是兼容 CUDA 9.0，没有兼容 CUDA 9.1，所以不要下载 9.1，CUDA 9.0 的下载地址是：https://developer.nvidia.com/cuda-90-download-archive，然后依次勾选好系统的版本. 这里我们选择 Linux-x86_64-Ubuntu-16.04-runfile 的配置，然后点击 Base Installer 部分的 Download 按钮，下载 CUDA 9.0 安装包。 对应的下载命令是： 1wget https://developer.nvidia.com/compute/cuda/9.0/Prod/local_installers/cuda_9.0.176_384.81_linux-run 执行此命令，等待下载完成即可。 接下来执行安装，运行如下命令： 1sudo bash cuda_9.0.176_384.81_linux-run 安装过程需要输入一些确认选项，过程如下： 1234567891011121314151617181920212223242526Description The NVIDIA CUDA Toolkit provides command-line and graphicaltools for building, debugging and optimizing the performanceDo you accept the previously read EULA?accept/decline/quit: accept Install NVIDIA Accelerated Graphics Driver for Linux-x86_64 384.81?(y)es/(n)o/(q)uit: n Install the CUDA 9.0 Toolkit?(y)es/(n)o/(q)uit: y Enter Toolkit Location [ default is /usr/local/cuda-9.0 ]: Do you want to install a symbolic link at /usr/local/cuda?(y)es/(n)o/(q)uit: y Install the CUDA 9.0 Samples?(y)es/(n)o/(q)uit: y Enter CUDA Samples Location [ default is /home/cqc ]: Installing the CUDA Toolkit in /usr/local/cuda-9.0 ... 最后如果出现这样的提示，就证明 CUDA 安装好了： 123456789101112131415Driver: Not SelectedToolkit: Installed in /usr/local/cuda-9.0Samples: Installed in /home/cqc, but missing recommended libraries Please make sure that - PATH includes /usr/local/cuda-9.0/bin - LD_LIBRARY_PATH includes /usr/local/cuda-9.0/lib64, or, add /usr/local/cuda-9.0/lib64 to /etc/ld.so.conf and run ldconfig as root To uninstall the CUDA Toolkit, run the uninstall script in /usr/local/cuda-9.0/bin Please see CUDA_Installation_Guide_Linux.pdf in /usr/local/cuda-9.0/doc/pdf for detailed information on setting up CUDA. ***WARNING: Incomplete installation! This installation did not install the CUDA Driver. A driver of version at least 384.00 is required for CUDA 9.0 functionality to work.To install the driver using this installer, run the following command, replacing &lt;CudaInstaller&gt; with the name of this run file: sudo &lt;CudaInstaller&gt;.run -silent -driver 然后我们需要配置一下环境变量，更改 ~/.bashrc 文件，添加如下几行： 123export PATH=/usr/local/cuda/bin$&#123;PATH:+:$&#123;PATH&#125;&#125;export LD_LIBRARY_PATH=/usr/local/cuda/lib64$&#123;LD_LIBRARY_PATH:+:$&#123;LD_LIBRARY_PATH&#125;&#125;export CUDA_HOME=/usr/local/cuda 修改完毕之后执行一下使其生效： 1source ~/.bashrc 这时我们输出 CUDA_HOME、LD_LIBRARY_PATH 就可以看到对应的输出了： 1234echo $CUDA_HOME/usr/local/cudaecho $LD_LIBRARY_PATH/usr/local/cuda/lib64 1nvcc -V 或者： 1nvidia-smi 这样就代表环境变量生效了，CUDA 安装完成。 cuDNN 7.1cuDNN 的全称是 The NVIDIA CUDA® Deep Neural Network library，是专门用来对深度学习加速的库，它支持 Caffe2, MATLAB, Microsoft Cognitive Toolkit, TensorFlow, Theano 及 PyTorch 等深度学习的加速优化，目前最新版本是 cuDNN 7.1，接下来我们来看下它的安装方式。 下载链接：https://developer.nvidia.com/rdp/cudnn-download，或者 cuDNN Download 需要注册之后才能打开，这里我们选择 cuDNN v7.1.1 (Feb 28, 2018), for CUDA 9.0，然后选择 cuDNN v7.1.1 Library for Linux： 下载下来之后解压安装即可： 12345tar -zxvf cudnn-9.0-linux-x64-v7.1.tgzsudo cp cuda/include/cudnn.h /usr/local/cuda/include/sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64/ -dsudo chmod a+r /usr/local/cuda/include/cudnn.hsudo chmod a+r /usr/local/cuda/lib64/libcudnn* 执行完如上命令之后，cuDNN 就安装好了，这时我们可以发现在 /usr/local/cuda/include 目录下就多了 cudnn.h 头文件。 ubuntu16.04查看CUDA和cuDNN版本cuda版本查看: 1cat /usr/local/cuda/version.txt cudnn版本查看: 1cat /usr/local/cuda/include/cudnn.h | grep CUDNN_MAJOR -A 2 TensorFlow 1.8到现在为止 Python 3.6、CUDA 9.0 和 cuDNN 7.1 就已经安装好了，而且环境变量也配置好了，接下来我们直接安装 TensorFlow 1.8 即可，TensorFlow 1.8 版本针对 CUDA 9 和 cuDNN 7 做了优化，可以预构建二进制文件。 这里需要安装的是 TensorFlow 的 GPU 版本，命令如下： 1pip3 install tensorflow-gpu==1.8.0 你会发现上面安装特别慢，强烈建议使用 国内pypi源加速 , 速度超快啊！！！ 1pip3 install tensorflow-gpu==1.8.0 -i https://pypi.tuna.tsinghua.edu.cn/simple 安装完成之后验证一下： 1234pythonimport tensorflow as tftf.__version__tf.__path__ 如果没有报错，那就证明全部环境配置都成功了。 如果您的tensorflow安装后不能使用，请考虑tensorflow版本和CUDA、cuDNN版本的兼容问题，请自行百度。 Pytorch 1.1pytorch官网：https://pytorch.org/ 打开官网，可以按照选择安装方式（pip , conda, source）和 python版本，cuda版本来进行安装，由于特殊的网络国情，一般是打不开，或者是无法查看 run the command 之后的指令的。 你会发现上面安装特别慢，强烈建议使用 国内pypi源加速 , 速度超快啊！！！ 1pip3 install torch==1.1.0 torchvision==0.3.0 -i https://pypi.tuna.tsinghua.edu.cn/simple 安装pytorch命令合集. 配置 ssh 远程连接1）安装 open-ssh 1apt-get install openssh-server 2）修改权限，允许 ssh 登录 root 1gedit /etc/ssh/sshd_config 注释 ：PermitRootLogin prohibit-password添加： PermitRootLogin yes 3）重启 ssh 1service ssh restart 设置Ubuntu 16.04 允许进行远程控制请参考 VNC实现Windows远程访问Ubuntu 16.04（无需安装第三方桌面,直接使用自带远程工具） . Windows全能终端神器MobaXterm安装主要功能： 支持各种连接SSH，X11，RDP，VNC，FTP，MOSH支持Unix命令（bash，ls，cat，sed，grep，awk，rsync，…）连接SSH终端后支持SFTP传输文件各种丰富的插件（git/dig/aria2…）可运行Windows或软件 官网下载地址 No module named ‘cv2’等python库解决方法只要是缺少的python库文件，请善用 国内pypi源加速 , 速度超快啊！！！ 1pip3 install opencv-python -i https://pypi.tuna.tsinghua.edu.cn/simple Python包更新方法当你需要更新python包时，还是那句话，请善用 国内pypi源加速 , 速度超快啊！！！ 如：我当前需要更新pip 1pip install --upgrade pip -i https://pypi.tuna.tsinghua.edu.cn/simple Ubuntu下python开发IDE专业版Pycharm的安装请自行百度，可参考 https://blog.csdn.net/CAU_Ayao/article/details/80578600 进行安装。 Ubuntu下Markdown编辑器Typora的安装 一个优雅的markdown编辑器，支持mac，windows，linux全平台，是一款支持实时预览的 Markdown 文本编辑器 ，完全免费。 官方下载地址 | 史上最完美的 Typora 教程 TeamViewer 远程控制桌面工具安装TeamViewer主要是用来连实验室的电脑，也可以用用 AnyDesk, 两个都是全平台的. 以上便是 Ubuntu 16.04 + Nvidia GTX 1080 + Python 3.6 + CUDA 9.0 + cuDNN 7.1 + TensorFlow 1.8 + Pytorch 1.1 + ssh远程连接设置+ Ubunt桌面远程控制等 完整环境配置过程, RTX 2080显卡的环境安装过程也可同作参考。 国内常见的pypi源123456清华：https://pypi.tuna.tsinghua.edu.cn/simple阿里云：http://mirrors.aliyun.com/pypi/simple/中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/华中理工大学：http://pypi.hustunique.com/山东理工大学：http://pypi.sdutlinux.org/ 豆瓣：http://pypi.douban.com/simple/ 他山之石： Ubuntu下安装CUDA10.0遇到的问题（一定要注意自己版本） tensorflow各个版本的CUDA以及Cudnn版本对应关系 Tensorflow不同版本要求与CUDA及CUDNN版本对应关系 Ubuntu16.04 安装python3.6和相应的pip3 pytorch1.0]]></content>
      <categories>
        <category>深度学习环境搭建</category>
      </categories>
      <tags>
        <tag>深度学习环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo 博客搭建指南]]></title>
    <url>%2F2019%2F08%2F24%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment Hexo的简洁、神秘让我跃跃欲试，在使用过程中遇到了很多问题，整理此文，一是方便其他技术人搭建自己的博客，二是给自己的学习之旅做个总结。 Hexo 有两份主要的配置文件（_config.yml），一份位于站点根目录下，另一份位于主题目录下。为了描述方便，在以下说明中，将前者称为站点配置文件，后者称为主题配置文件。 1 Hexo介绍Hexo是基于NodeJs的静态博客框架，简单、轻量，其生成的静态网页可以托管在Github和Heroku上。 超快速度 支持MarkDown 一键部署 丰富的插件 下面以我的博客为例，xiaoming.github.io 2 环境准备2.0 安装gitGit for Windows, 这里提供一个国内的下载站，方便网友下载，然后选择安装目录后，一直next就可以。https://github.com/waylau/git-for-win 2.1 安装node.js去nodejs官网下载对应系统的安装包，然后一直一直next安装。 检验安装成功： 1$ node -v 2.2 安装hexo1$ npm install hexo-cli -g 注意：Mac系统，则需要 1$ sudo npm install hexo-cli -g 3 利用Hexo搭建一个博客3.1 创建博客目录xiaoming.github.io123$ hexo init xiaoming.github.io$ cd xiaoming.github.io$ npm install 3.2 生成静态页面12$ hexo clean$ hexo g g 即generate 3.3 运行1$ hexo s s 即server 然后打开浏览器，输入地址 localhost:4000 即可看到效果 4 发一篇文章试试4.1 命令方式1$ hexo new test 此时会在source/_posts目录下生成test.md文件，输入些许内容，然后保存. 生成下，看看效果 123$ hexo clean$ hexo g$ hexo s 访问 localhost:4000 即可 4.2 直接方式在 source/_posts/下新建一个.md文件也可 5 配置网站的设置大部分都在_config.yml文件中，详细配置可以查看官方文档 下面只列出简单常用配置 title -&gt; 网站标题 subtitle -&gt; 网站副标题 description -&gt; 网站描述 author -&gt; 您的名字 language -&gt; 网站使用的语言 坑：进行配置时，需要在冒号:后加一个英文空格 1title: xiaoming 6 换一个好看的主题Hexo 中有很多主题，可以在官网查看。这里我推荐hexo-theme-next，下面列举更换主题的一般套路： 6.1 下载主题资源123$ git clone https://github.com/iissnan/hexo-theme-next themes/next克隆新地址：$ git clone https://github.com/theme-next/hexo-theme-next themes/next 6.2 应用下载的主题在网站配置文件_config.yml中，配置theme 1theme: next next是主题名称，具体的可查看主题的文档 6.3 主题其他配置可在/theme/{theme}/_config.yml 主题的配置文件下进行主题的配置。 接下来，可以执行万能的调试命令看看效果 123$ hexo clean$ hexo g #g 是 generate 缩写:生成，d 是 deploy 缩写:部署$ hexo s #s 是 serverce 缩写:启动服务预览 7 部署到Github7.1 有个github账号xiaoming7.2 创建一个xiaoming.github.io的public仓库如果您的账户名是xiaoming,则需要创建一个xiaoming.github.io的public仓库. 7.3 安装 hexo-deployer-git1$ npm install hexo-deployer-git --save 7.4 网站配置git在网站的_config.yml中配置deploy 1234deploy: type: git repo: &lt;repository url&gt; branch: [branch] branch为分支，默认为master,可以不配置repo为仓库地址，在github上新建仓库后，可复制此地址 7.5 部署1$ hexo d d 即deploy 8 贴标签，方便搜索8.1 两个确认 确认站点配置文件有 1tag_dir: tags 确认主题配置文件有 1tags: tags 8.2 新建tags页面1&gt;运行以下命令 1$ hexo new page tags 此时会在source/下生成tags/index.md文件 2&gt;修改/source/tags目录下的index.md文件 1234title: tagsdate: 2015-10-20 06:49:50type: "tags"comments: false date 可保持系统生成的时间， 12type: "tags"comments: false 很重要 3&gt;修改主题配置文件去掉tags的注释 1234567menu: home: / #主页 categories: /categories #分类页（需手动创建） #about: /about #关于页面（需手动创建） archives: /archives #归档页 tags: /tags #标签页（需手动创建） #commonweal: /404.html #公益 404 （需手动创建） 8.3 在文章中添加tags在文章xx.md中添加： 1234tags: - Tag1 - Tag2 - Tag3 多个Tag可按上面的格式添加。 其文件头部类似： 123456title: TagEditTextdate: 2016-11-19 10:44:25tags: - Tag1 - Tag2 - Tag3 9 分类，给文章归档9.1 两个确认 确认站点配置文件打开了 1category_dir: categories 确认主题配置文件打开了 1categories: /categories 9.2 新建categories文件1&gt;运行以下命令 1$ hexo new page categories 此时会在source目录下生成categories/index.md文件 2&gt;修改/source/categories目录下的index.md文件 1234title: categoriesdate: 2015-10-20 06:49:50type: "categories"comments: false date 可保持系统生成的时间， 12type: "categories"comments: false 很重要 3&gt;修改主题配置文件去掉categories的注释 1234567menu: home: / #主页 categories: /categories #分类页（需手动创建） #about: /about #关于页面（需手动创建） archives: /archives #归档页 tags: /tags #标签页（需手动创建） #commonweal: /404.html #公益 404 （需手动创建） 9.3 在文章中添加categories在文章xx.md中添加： 12categories: - cate 其文件头部类似： 1234title: TagEditTextdate: 2016-11-19 10:44:25categories: - cate 10 hexo修改文章底部的那个带#号的标签实现效果图 具体实现方法: 修改模板 /themes/next/layout/_macro/post.swig，搜索 rel=&quot;tag&quot;&gt;# 或者 rel=&quot;tag&quot;&gt; ，将 # 或者 换成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; 11 Hexo文章置顶的方法1&gt; 安装插件: 12npm uninstall hexo-generator-index --savenpm install hexo-generator-index-pin-top --save 然后在需要置顶的文章的Front-matter中加上top即可： 123title: 2019date: 2019-02-14 16:10:03top: 1 或者在需要置顶的文章的Front-matter中加上top: true亦可。比如下面这样： 1234title: hexo博客置顶date: 2017-09-08 12:00:25categories: 博客搭建系列top: true 到目前为止，置顶功能已经可以实现了。 2&gt;设置置顶标志: 打开：/blog/themes/next/layout/_macro 目录下的post.swig文件，定位到&lt;div class=&quot;post-meta&quot;&gt;标签下，紧接着下一行插入如下代码： 12345&#123;% if post.top %&#125; &lt;i class="fa fa-thumb-tack"&gt;&lt;/i&gt; &lt;font color=7D26CD&gt;置顶&lt;/font&gt; &lt;span class="post-meta-divider"&gt;|&lt;/span&gt;&#123;% endif %&#125; Hexo常用命令1234567891011121314151617$ hexo n "博客名称" =&gt; hexo new "博客名称" #这两个都是创建新文章，前者是简写模式$ hexo p =&gt; hexo publish$ hexo g =&gt; hexo generate #生成$ hexo s =&gt; hexo server #启动服务预览$ hexo d =&gt; hexo deploy #部署关于hexo的服务器命令:$ hexo server #Hexo 会监视文件变动并自动更新，无须重启服务器。$ hexo server -s #静态模式$ hexo server -p 5000 #更改端口$ hexo server -i 192.168.1.1 #自定义IP$ hexo clean #清除缓存，网页正常情况下可以忽略此条命令$ hexo g #生成静态网页$ hexo d #开始部署hexo资料网站:https://hexo.io/zh-cn/]]></content>
      <categories>
        <category>前端 - 创建博客</category>
      </categories>
      <tags>
        <tag>搭建博客</tag>
      </tags>
  </entry>
</search>
