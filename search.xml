<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ICIP2019-难忘的台湾之行</title>
      <link href="/2019/09/27/icip2019-nan-wang-de-tai-wan-zhi-xing/"/>
      <url>/2019/09/27/icip2019-nan-wang-de-tai-wan-zhi-xing/</url>
      
        <content type="html"><![CDATA[<div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=28636660&auto=1&height=66"></iframe></div>从投稿 IEEE ICIP 2019 到中稿 ICIP Oral，再到顺利拿到入台的批件，终于在9.21日开始了台湾之行，这篇博文用来记录在台北一周的见闻。<a id="more"></a> <h3 id="ICIP-2019-IEEE-International-Conference-on-Image-Processing"><a href="#ICIP-2019-IEEE-International-Conference-on-Image-Processing" class="headerlink" title="ICIP 2019 : IEEE International Conference on Image Processing"></a>ICIP 2019 : IEEE International Conference on Image Processing</h3><p>第26届IEEE国际图像处理会议（ICIP）顺利在台湾<strong>台北国际会议中心</strong>举行，ICIP是世界上规模最大，最全面的技术会议，重点是图像、视频处理和计算机视觉，会议包括了特邀主旨演讲，Oral Session，Poster Session以及行业展示等等…</p><p><img src="/2019/09/27/icip2019-nan-wang-de-tai-wan-zhi-xing/ICIP2019.jpg" alt></p><p>9.22号上午去注册，和国内相比，并没有采用人脸识别签到，速度较慢，所以排队签到。领到了参会牌子、带有ICIP Logo的纪念帽和Tshirt、以及ICIP定制的SWISSGEAR双肩包、多功能转换插座、已充值的交通悠游卡、U盘等等，早知道那么贴心，有些东西就不提前买了😄</p><p>和我同行的是同班级同学，一块组团过来参会了，拍照留念，这次能出来参会真的不容易。。。</p><img src="/2019/09/27/icip2019-nan-wang-de-tai-wan-zhi-xing/合影留念.jpg" style="zoom: 67%;"><p>好不容易来一趟，多在台北转转吧。。。😂</p><h4 id="西门町"><a href="#西门町" class="headerlink" title="西门町"></a>西门町</h4><blockquote><p><strong>西门町</strong>, 台北著名的流行商圈、最具特色徒步区，是台北第一条专为行人设置的区域，红楼、刺青街、电影街、KTV、万年大楼、万国百货、诚品书店和各式各样的精品小店都可以在西门町看到，是台北民众假日最喜爱的去处之一</p></blockquote><p>西门町，感觉真心不错，虽然没有南京新街口的气韵，它的独特风格即是潮！许多网红店在那边，走走看看停停，很惬意啊！西门町是青年文化胜地，也是台北最具特色的徒步区。杂志、游戏机、化妆品、潮牌潮衣、玩具模型等应有尽有。西门町特色小吃店众多，鸭肉扁、阿宗面线、老天禄卤味等远近驰名。街上时常会有艺人弹唱或特色活动。</p><p><img src="/2019/09/27/icip2019-nan-wang-de-tai-wan-zhi-xing/xmd-0.jpg" alt></p><img src="/2019/09/27/icip2019-nan-wang-de-tai-wan-zhi-xing/xmd-1.jpg" style="zoom: 67%;"><img src="/2019/09/27/icip2019-nan-wang-de-tai-wan-zhi-xing/xmd-2.jpg" style="zoom: 67%;"><h4 id="松山文创园"><a href="#松山文创园" class="headerlink" title="松山文创园"></a>松山文创园</h4><p>松山文创园离国父纪念馆很近。既然是创意园区，所以是以文化为主打。没有了游客的熙熙攘攘，也没有商业化气息很浓，可以让你有机会细细的品味。建议在台北无论是松山还是华山创园区都是值得花半天时间来细细品味的。。。</p><p><img src="/2019/09/27/icip2019-nan-wang-de-tai-wan-zhi-xing/sswcy-1.jpg" alt></p><p><img src="/2019/09/27/icip2019-nan-wang-de-tai-wan-zhi-xing/sswcy-2.jpg" alt></p><p><img src="/2019/09/27/icip2019-nan-wang-de-tai-wan-zhi-xing/sswcy-3.jpg" alt></p><p><img src="/2019/09/27/icip2019-nan-wang-de-tai-wan-zhi-xing/sswcy-4.jpg" alt></p><h4 id="台北故宫博物院"><a href="#台北故宫博物院" class="headerlink" title="台北故宫博物院"></a>台北故宫博物院</h4><blockquote><p><strong>台北故宫博物院</strong>是中国著名的历史与文化艺术史博物馆，坐落在台北市基隆河北岸士林区外双溪，依山傍水，气势宏伟，碧瓦黄墙。院前广场耸立由6根石柱组成的牌坊，气势宏伟，整座建筑庄重典雅，富有民族特色。院内设有20余间展览室，文化瑰宝不胜枚举。院内收藏有自北京故宫博物院、南京国立中央博物院、沈阳故宫、热河行宫、中国青铜器之乡-宝鸡运到台湾的二十四万余件文物。</p></blockquote><p><img src="/2019/09/27/icip2019-nan-wang-de-tai-wan-zhi-xing/ggbwy-0.jpg" alt></p><p><img src="/2019/09/27/icip2019-nan-wang-de-tai-wan-zhi-xing/ggbwy-1.jpg" alt></p><p><img src="/2019/09/27/icip2019-nan-wang-de-tai-wan-zhi-xing/ggbwy-2.jpg" alt></p><p><img src="/2019/09/27/icip2019-nan-wang-de-tai-wan-zhi-xing/ggbwy-3.jpg" alt></p><p><img src="/2019/09/27/icip2019-nan-wang-de-tai-wan-zhi-xing/ggbwy-4.jpg" alt></p><p><img src="/2019/09/27/icip2019-nan-wang-de-tai-wan-zhi-xing/ggbwy-5.jpg" alt></p><p><img src="/2019/09/27/icip2019-nan-wang-de-tai-wan-zhi-xing/ggbwy-6.jpg" alt></p><p><img src="/2019/09/27/icip2019-nan-wang-de-tai-wan-zhi-xing/ggbwy-7.jpg" alt></p><p><img src="/2019/09/27/icip2019-nan-wang-de-tai-wan-zhi-xing/ggbwy-8.jpg" alt></p><p><img src="/2019/09/27/icip2019-nan-wang-de-tai-wan-zhi-xing/ggbwy-9.jpg" alt></p><p>台北故宫博物院的馆藏丰富，翠玉白菜、肉形石、毛公鼎、甲骨档案、陶瓷铜器、古代书画、善本古籍……太多太多的精品，目不暇接。</p><h4 id="台北101摩天大楼"><a href="#台北101摩天大楼" class="headerlink" title="台北101摩天大楼"></a>台北101摩天大楼</h4><p>101大楼就在我们开会的地点<strong>台北国际会议中心</strong>附近，听司机说没什么可看的，我们也就没买票上去看看，就在外面转了转… 101大楼是台湾最高的一座建筑，高500多米，建筑在地上有101层，地下有5层。只可惜晚上我们要参加Banquet，就没时间了。如果真的要观景的话，日落前到达一直游览到天黑，夜景会很漂亮，可以在高处尽情地欣赏台北的全景。101大楼门票差不多500新台币，合人民币100左右。</p><p><img src="/2019/09/27/icip2019-nan-wang-de-tai-wan-zhi-xing/xy101-0.jpg" alt></p><p><img src="/2019/09/27/icip2019-nan-wang-de-tai-wan-zhi-xing/xy101-1.jpg" alt></p><p><img src="/2019/09/27/icip2019-nan-wang-de-tai-wan-zhi-xing/xy101-2.jpg" alt></p><h4 id="台北圆山大饭店"><a href="#台北圆山大饭店" class="headerlink" title="台北圆山大饭店"></a>台北圆山大饭店</h4><p>大会<strong>Banquet</strong>晚宴设在了这里，<strong>圆山大饭店</strong>建筑恢弘大气，就像一座大宫殿。酒店非常有特色，很大，1952建造保存的很好 ，员工服务好。。。</p><p><img src="/2019/09/27/icip2019-nan-wang-de-tai-wan-zhi-xing/ysfd-0.jpg" alt></p><p><img src="/2019/09/27/icip2019-nan-wang-de-tai-wan-zhi-xing/ysfd-1.jpg" alt></p><p><img src="/2019/09/27/icip2019-nan-wang-de-tai-wan-zhi-xing/ysfd-2.jpg" alt></p><p><img src="/2019/09/27/icip2019-nan-wang-de-tai-wan-zhi-xing/ysfd-3.jpg" alt></p><p><img src="/2019/09/27/icip2019-nan-wang-de-tai-wan-zhi-xing/ysfd-4.jpg" alt></p><p><img src="/2019/09/27/icip2019-nan-wang-de-tai-wan-zhi-xing/ysfd-5.jpg" alt></p><p><img src="/2019/09/27/icip2019-nan-wang-de-tai-wan-zhi-xing/ysfd-6.jpg" alt></p><p><img src="/2019/09/27/icip2019-nan-wang-de-tai-wan-zhi-xing/ysfd-7.jpg" alt></p><p><img src="/2019/09/27/icip2019-nan-wang-de-tai-wan-zhi-xing/ysfd-8.jpg" alt></p><p>碰到了<strong>大佬 Yann LeCun</strong>，美国工程院院士、Facebook人工智能研究院院长、纽约大学Sliver教授…</p><p><img src="/2019/09/27/icip2019-nan-wang-de-tai-wan-zhi-xing/ysfd-9.jpg" alt></p><h4 id="饶河街夜市"><a href="#饶河街夜市" class="headerlink" title="饶河街夜市"></a>饶河街夜市</h4><p>最后一天下午参会后，到饶河街夜市转了一圈。</p><p><strong>饶河街夜市</strong>位于台北松山区，紧邻着松山慈祐宫，是台北的庶民饮食、购物天堂。交通极其便利，驱车前往台北101仅15分钟，离松山火车站也就600米距离。每到周末假日，这里必定人潮汹涌，其中不少是慕名而来的游客。夜幕降临，夜市街道上空挂着的灯饰就会点亮，灯火辉煌。道路中间有两排摊位，两侧则是整排的店面。整个夜市分布着数百家摊店，不管是豆花、蚵仔面线、药燉排骨，还是土耳其特色冰淇淋都应有尽有。除了夜市必有的美食，这里还有许多服饰商店，从帽子、鞋子到包包，甚至连抓娃娃机和各种算命摊小摊都可以在此找到，真是摊位齐全啊！</p><p><img src="/2019/09/27/icip2019-nan-wang-de-tai-wan-zhi-xing/rhjys-1.jpg" alt></p><p><img src="/2019/09/27/icip2019-nan-wang-de-tai-wan-zhi-xing/rhjys-2.jpg" alt></p><p><img src="/2019/09/27/icip2019-nan-wang-de-tai-wan-zhi-xing/rhjys-3.jpg" alt></p><h4 id="台北夜景"><a href="#台北夜景" class="headerlink" title="台北夜景"></a>台北夜景</h4><p>由于当天玩累了，我们三人并没有找<strong>观景台</strong>来俯瞰台北夜景，就在一个大楼的<strong>9层</strong>眺望了下，很美。。。</p><p><img src="/2019/09/27/icip2019-nan-wang-de-tai-wan-zhi-xing/yj-0.jpg" alt></p><h4 id="台湾特产点心美食"><a href="#台湾特产点心美食" class="headerlink" title="台湾特产点心美食"></a>台湾特产点心美食</h4><p>去台湾一定要带的伴手礼：<strong>奶黄绿豆糕、凤梨酥、牛轧糖、麻薯、豆干、太阳饼</strong>等等</p><blockquote><p><strong>凤梨酥</strong>相传最早起源于中国三国时期，其凤梨闽南话发音又称 “<strong>旺来</strong>”，象征子孙旺旺来的意思。凤梨酥内馅，并不是单纯的菠萝。为了口感需要，通常会添加冬瓜，这样的口味已经是大多数人的习惯。台北市面上可以买到加了五谷杂粮、松子、蛋黄、栗子等不同口味的凤梨酥；饼皮也加入燕麦等食材，口感更为多元。</p></blockquote><p>一路上司机师傅连连推荐，<strong>冠军美食</strong>👍，试吃也OK，很酥软很爽口，香甜又韧劲儿十足，甜而不腻。品一口清茶，忍不住再来一块😄 。买回去送老师、同学都很好。。。</p><img src="/2019/09/27/icip2019-nan-wang-de-tai-wan-zhi-xing/ms-1.jpg" style="zoom: 50%;"><img src="/2019/09/27/icip2019-nan-wang-de-tai-wan-zhi-xing/ms-2.jpg" style="zoom:50%;"><h4 id="IEEE-ICIP-2019-Oral-Session"><a href="#IEEE-ICIP-2019-Oral-Session" class="headerlink" title="IEEE ICIP 2019 Oral Session"></a>IEEE ICIP 2019 Oral Session</h4><p>说了那么多玩的啊😂，其实来台北主要还是参加<strong>ICIP2019</strong>大会的，很荣幸的论文被选为了<strong>Oral</strong>，于分会场作<strong>20min</strong>发言，包括提问环节。还好，不是太紧张…</p><p><img src="/2019/09/27/icip2019-nan-wang-de-tai-wan-zhi-xing/oral-1.jpg" alt></p><p><img src="/2019/09/27/icip2019-nan-wang-de-tai-wan-zhi-xing/oral-2.jpg" alt></p><p><strong>PPT首页和末页</strong>：</p><p><img src="/2019/09/27/icip2019-nan-wang-de-tai-wan-zhi-xing/oral-3.jpg" alt></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>此次<strong>台湾之行</strong>，虽然没有大玩，但也了解了台湾这边的文化生活、风土人情等，蛮开心的一次会议出行计划，台湾，再会！</p><p>拿着实验室的资助来参会，非常感谢导师，正如<strong>导师寄语</strong>，课题组每个研究生，都应该至少参加一次国际会议。算起来继8月份去<strong>韩国</strong>参加国际会议后，这是我第二次出国/境开会，倍感荣幸，见到不一样的人，听到不一样的研究，你的眼界就不一样了，看事物的方式也不一样了。</p><p><strong>最后还是祝自己2019年顺利吧，希望找工作顺利，毕业顺利，最后碰到一个有缘人吧。</strong></p><p><strong>也希望课题组的学弟学妹们加油</strong> 💪</p>]]></content>
      
      
      <categories>
          
          <category> 参加国际会议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 参加国际会议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to read a paper</title>
      <link href="/2019/09/13/how-to-read-a-paper/"/>
      <url>/2019/09/13/how-to-read-a-paper/</url>
      
        <content type="html"><![CDATA[<div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=574276355&auto=1&height=66"></iframe></div>作研究要花费大量时间在阅读论文上📕。但是这个技能却很少人教，这就导致大量时间被浪费。最近发现一篇paper，教人如何阅读paper，所以记录如下，与君共勉！！！<a id="more"></a> <h4 id="重要性"><a href="#重要性" class="headerlink" title="重要性"></a>重要性</h4><ul><li>在field内保持先进性，keep up the trend</li><li>获得灵感</li><li>review</li></ul><h4 id="方法论"><a href="#方法论" class="headerlink" title="方法论"></a>方法论</h4><p>作者总结出了three-pass 方法。顾名思义，就是阅读一篇paper三遍，每一遍分别有不同的侧重点。</p><ul><li>general idea</li><li>content，but not details</li><li>understand the paper in depth</li></ul><h4 id="第一遍"><a href="#第一遍" class="headerlink" title="第一遍"></a>第一遍</h4><p>这一遍快速扫描，用来决定是否需要继续深入读下去。</p><h5 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h5><ul><li>5-10 min</li></ul><h5 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h5><ul><li>title, abstract, introduction</li><li>只看section &amp; subsection headings</li><li>conclusion</li><li>扫一眼reference，排除掉看过的那些paper</li></ul><h5 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h5><p>看完这一遍要能够回答：</p><ul><li>类别：这篇论文是哪一个类别的？ 是提出了一个新方法、还是实际分析、或是提出了一个模型？</li><li>基于什么理论基础？</li><li>是否valid？包括假设是否合理、逻辑是否合理等。</li><li>主要贡献？</li><li>写的清晰么？</li></ul><h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><p>第一遍读完之后，可能你会选择放弃这篇paper。这可能是因为你对论文不感兴趣，或者是你对该领域的了解不足以看懂论文，或者作者做出了无效的假设。 只阅读一遍的论文，适用于阅读不在您研究领域内的论文，可能会给你启发。</p><h5 id="启发"><a href="#启发" class="headerlink" title="启发"></a>启发</h5><p><strong>注意</strong>！但你知道如何读第一遍论文的时候，也要想到反过来，reviewer在读你的论文的时候会如何想。因为大多数reviewer只会读它<strong>一次</strong>。 所以，注意选择连贯的section &amp; subsection headings，并撰写简洁而全面的摘要。 如果审稿人在一次通读后无法理解要点，那么该论文可能会被拒绝; 如果读者在五分钟后无法理解论文的亮点，那么论文可能永远不会被阅读。</p><h4 id="第二遍"><a href="#第二遍" class="headerlink" title="第二遍"></a>第二遍</h4><p>第二遍需要读更仔细，但是忽略掉细节，如证明过程。</p><p>圈出或写下关键词会有帮助。</p><h5 id="内容-1"><a href="#内容-1" class="headerlink" title="内容"></a>内容</h5><ul><li>figure、diagrams、或者其他图表</li><li>标记出reference中没有阅读过的paper，这对background的扩展是一个帮助</li></ul><h5 id="时间-1"><a href="#时间-1" class="headerlink" title="时间"></a>时间</h5><ul><li>&lt;= 1小时</li></ul><h5 id="目标-1"><a href="#目标-1" class="headerlink" title="目标"></a>目标</h5><ul><li>能够列举文章的几个主要观点，及其支持的论据</li></ul><h5 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h5><p>有时候读完第二遍仍然无法理解，那么可能是因为：</p><ul><li>你不熟悉这个subject （课题），有很多术语无法理解</li><li>作者所用的技术、方法你无法理解</li><li>作者写的不好</li><li>你太累了</li></ul><p>那么现在可以选择：</p><ul><li>放一边，祈祷你职业生涯的成功与它无关</li><li>看完reference 再来看它</li><li>开始第三遍</li></ul><h4 id="第三遍"><a href="#第三遍" class="headerlink" title="第三遍"></a>第三遍</h4><p>第三遍的时候，随着作者的逻辑，与作者一起假装完成一次推理/实现过程。这一遍要重点关注细节，把每一个statement中暗藏的假设都找出来。并且，还要时刻问自己，如果是自己写/做这一步，会如何做？这也能给future work提供想法。</p><h5 id="时间-2"><a href="#时间-2" class="headerlink" title="时间"></a>时间</h5><ul><li>初学者：4-5小时</li><li>熟练工：1小时</li></ul><h5 id="目标-2"><a href="#目标-2" class="headerlink" title="目标"></a>目标</h5><ul><li>能够重构整篇paper的结构</li><li>能够说出它的优缺点</li><li>最好能够找出它缺少了什么标准、相关工作，或实验、分析技术中可能出现的问题</li></ul><h3 id="如何做survey"><a href="#如何做survey" class="headerlink" title="如何做survey"></a>如何做survey</h3><p>为了深入一个领域，我们往往需要做某个specific方向的survey。 那么如何做呢？作者也提供了一个很好的三步走思路。</p><h4 id="第一步-善用搜索引擎"><a href="#第一步-善用搜索引擎" class="headerlink" title="第一步 善用搜索引擎"></a>第一步 善用搜索引擎</h4><p><strong>Google scholar</strong>  <a href="http://xilesou.99lb.net/" target="_blank" rel="noopener"><strong>好用的谷歌学术网址</strong></a></p><p><strong>DBLP</strong>       <a href="https://dblp.uni-trier.de/db/" target="_blank" rel="noopener"><strong>computer science bibliography</strong></a> 、<a href="https://dblp.org/" target="_blank" rel="noopener"><strong>computer science bibliography</strong></a></p><p><strong>CiteSeerX</strong>   <a href="http://citeseer.ist.psu.edu/index" target="_blank" rel="noopener"><strong>NEC研究院学术论文</strong></a></p><p>搜索关键词，找出最近的3-5篇paper</p><p>用第一遍阅读法阅读它们，并阅读它们的related work部分。如果幸运的话，通过它们，可能就能找到最近的一篇survey，那么就不用自己做survey了～</p><h4 id="第二步-找出大佬"><a href="#第二步-找出大佬" class="headerlink" title="第二步 找出大佬"></a>第二步 找出大佬</h4><p>找出以上的论文中重复的引用（key paper）、频繁出现的名字(大佬)。下载key papers，并在搜索引擎中搜索大佬们近期的文章。看看这些文章一般发表在什么conference上。为什么要看这些conference呢？因为大佬们的文章一般只会发在top conference上，这能帮你很快找出该领域的顶会。</p><h4 id="第三步-利用会议找出高质量文章"><a href="#第三步-利用会议找出高质量文章" class="headerlink" title="第三步 利用会议找出高质量文章"></a>第三步 利用会议找出高质量文章</h4><p>通过刚刚找出的顶会，查看最近几年发表的论文中相关的论文。这些高质量的论文+ 第二步中找到的那些key paper， 能帮你快速建立你的第一版survey。</p><p>重复上述过程一遍，作为论文补充。</p><h4 id="最后，学会看-arXiv才能不错过自己研究领域的最新进展"><a href="#最后，学会看-arXiv才能不错过自己研究领域的最新进展" class="headerlink" title="最后，学会看 arXiv才能不错过自己研究领域的最新进展"></a>最后，学会看 <a href="https://arxiv.org/" target="_blank" rel="noopener"><strong>arXiv</strong></a>才能不错过自己研究领域的最新进展</h4><p><strong>arXiv论文怎样读？</strong></p><p><img src="/2019/09/13/how-to-read-a-paper/arxiv-reader.jpg" alt></p><h4 id="AI领域：如何做优秀研究并写高水平论文？"><a href="#AI领域：如何做优秀研究并写高水平论文？" class="headerlink" title="AI领域：如何做优秀研究并写高水平论文？"></a>AI领域：如何做优秀研究并写高水平论文？</h4><p><strong>周志华</strong>教授《做研究与写论文》的PPT(时间比较早，但方法永远不会过时)。其详细介绍了关于为什么要做研究？如何做研究，选择研究方向、选择研究课题(Topic)，学习领域知识、选期刊投稿、稿件处理过程、写高水平论文的方法与技巧等方面的知识，是一份非常优秀的做研究和写论文指南，值得每个人细读 ★★★★★</p><blockquote><p>周志华教授简介</p><p>他于2001年1月留校任教，2002年破格晋升副教授，2003年获 国家杰出青年科学基金，随后被聘任为教授，2004年获博士生导师资格，2006年入选教育部长江学者特聘教授。现任南京大学 校学术委员会委员、计算机科学与技术系 主任、人工智能学院 院长，主要从事人工智能、机器学习、数据挖掘等领域的研究工作。主持多项科研课题，出版《机器学习》(2016)、《Ensemble Methods: Foundations and Algorithms》(2012)、《Evolutionary Learning: Advances in Theories and Algorithms》(2019)。</p><p>周教授主页：<a href="https://cs.nju.edu.cn/zhouzh/" target="_blank" rel="noopener">https://cs.nju.edu.cn/zhouzh/</a></p><p><img src="/2019/09/13/how-to-read-a-paper/zhou_0.PNG" alt></p></blockquote><p><img src="/2019/09/13/how-to-read-a-paper/zhou_1.jpg" alt></p><p><strong>原文PDF下载链接</strong></p><p><a href="https://pan.baidu.com/s/17Mq8y7DFRoY7sGESF9vZhQ" target="_blank" rel="noopener">https://pan.baidu.com/s/17Mq8y7DFRoY7sGESF9vZhQ</a> </p><p>提取码: nmvk </p><h4 id="他山之石"><a href="#他山之石" class="headerlink" title="他山之石"></a>他山之石</h4><ul><li>文章来源: <a href="https://www.albany.edu/spatial/WebsiteFiles/ResearchAdvices/how-to-read-a-paper.pdf" target="_blank" rel="noopener"><strong>how-to-read-a-paper</strong></a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 科研工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科研工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Latex撰写论文常用技巧总结</title>
      <link href="/2019/09/12/latex-zhuan-xie-lun-wen-chang-yong-ji-qiao-zong-jie/"/>
      <url>/2019/09/12/latex-zhuan-xie-lun-wen-chang-yong-ji-qiao-zong-jie/</url>
      
        <content type="html"><![CDATA[<div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=489499305&auto=1&height=66"></iframe></div>写论文不得不时常与Latex打交道，这篇博文专门用来记录使用Latex撰写论文过程中遇到的一些技巧与心得。<a id="more"></a> <blockquote><p>使用环境：online overleaf (<a href="https://www.overleaf.com/" target="_blank" rel="noopener">https://www.overleaf.com/</a>)</p><ul><li>Overleaf是一个在线latex环境，有许多模版可以选择，还可以上传已有的latex文件夹（zip），很方便。</li><li>推荐指数：🌟🌟🌟🌟🌟</li></ul><p>同类替代：sharelatex (<a href="https://cn.sharelatex.com/" target="_blank" rel="noopener">https://cn.sharelatex.com/</a>)</p></blockquote><p>目前网上大部分人习惯TeX Live加编辑器的环境配置模式。尽管依旧有很多人在使用CTeX加WinEdit，但CTeX已经有很久没有更新，所以大家：<strong>千万不要装CTeX套装！！</strong></p><blockquote><p><strong>LaTeX安装配置参考</strong></p><ul><li><a href="https://www.jianshu.com/p/5a42c5dea05c" target="_blank" rel="noopener">LaTeX安装资料合集</a></li><li><a href="https://blog.csdn.net/so_geili/article/details/72636466" target="_blank" rel="noopener">详细安装配图说明</a></li><li><a href="https://www.latexstudio.net/page/texsoftware/" target="_blank" rel="noopener">LaTex开源小屋软件下载</a></li></ul></blockquote><h3 id="1-如何引用参考文献"><a href="#1-如何引用参考文献" class="headerlink" title="1.如何引用参考文献"></a>1.如何引用参考文献</h3><h4 id="1-1写bib文件"><a href="#1-1写bib文件" class="headerlink" title="1.1写bib文件"></a>1.1写bib文件</h4><ul><li>Google Scholar 搜索需要引用的论文标题  <a href="http://xilesou.99lb.net/" target="_blank" rel="noopener"><strong>好用的谷歌学术网址</strong></a></li></ul><p><img src="/2019/09/12/latex-zhuan-xie-lun-wen-chang-yong-ji-qiao-zong-jie/googlescholar.PNG" alt></p><ul><li>输入文献名之后，在搜索结果中点引用：</li></ul><p><img src="/2019/09/12/latex-zhuan-xie-lun-wen-chang-yong-ji-qiao-zong-jie/ref.jpg" alt></p><ul><li>点击上图中的空心双引号，就会弹出这个窗口。选择想要的bib格式进行复制</li></ul><p><img src="/2019/09/12/latex-zhuan-xie-lun-wen-chang-yong-ji-qiao-zong-jie/bibtex.PNG" alt></p><h4 id="1-2新建bib文件"><a href="#1-2新建bib文件" class="headerlink" title="1.2新建bib文件"></a>1.2新建bib文件</h4><p>新建以<code>.bib</code>结尾的引用文件，并把刚刚复制的文献信息粘贴在文件中</p><pre class="line-numbers language-bash"><code class="language-bash">@article<span class="token punctuation">{</span>ferrari2006raman,  %此处为引用标签  title<span class="token operator">=</span><span class="token punctuation">{</span>Raman spectrum of graphene and graphene layers<span class="token punctuation">}</span>,  author<span class="token operator">=</span><span class="token punctuation">{</span>Ferrari, Andrea C and Meyer, JC and Scardaci, V and Casiraghi, C and Lazzeri, Michele and Mauri, Francesco and Piscanec, S and Jiang, Da and Novoselov, KS and Roth, S and others<span class="token punctuation">}</span>,  journal<span class="token operator">=</span><span class="token punctuation">{</span>Physical review letters<span class="token punctuation">}</span>,  volume<span class="token operator">=</span><span class="token punctuation">{</span>97<span class="token punctuation">}</span>,  number<span class="token operator">=</span><span class="token punctuation">{</span>18<span class="token punctuation">}</span>,  pages<span class="token operator">=</span><span class="token punctuation">{</span>187401<span class="token punctuation">}</span>,  year<span class="token operator">=</span><span class="token punctuation">{</span>2006<span class="token punctuation">}</span>,  publisher<span class="token operator">=</span><span class="token punctuation">{</span>APS<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-3在正文中链接到bib文件"><a href="#1-3在正文中链接到bib文件" class="headerlink" title="1.3在正文中链接到bib文件"></a>1.3在正文中链接到bib文件</h4><p>为了更有条理地管理latex文档，所以比较习惯把整个latex文档分成3部分：</p><ul><li>包管理、标题、自定义环境、变量等；</li><li>正文部分；</li><li>引用文献；</li></ul><h4 id="1-4在正文中进行引用"><a href="#1-4在正文中进行引用" class="headerlink" title="1.4在正文中进行引用"></a>1.4在正文中进行引用</h4><p>以上图bib文件中的第一篇paper为例，如果要引用它，则：</p><pre class="line-numbers language-bash"><code class="language-bash">we cite a paper here \cite<span class="token punctuation">{</span>ferrari2006raman<span class="token punctuation">}</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-公式录入"><a href="#2-公式录入" class="headerlink" title="2.公式录入"></a>2.公式录入</h3><blockquote><p><strong>免费数学神器Mathpix，强大到出移动版了，手写公式扫一扫就能识别，一键嵌入 MarkDown。</strong></p><ul><li><a href="https://www.zhihu.com/topic/19817821/top-answers" target="_blank" rel="noopener">公式编辑器-知乎</a></li><li><a href="https://www.jiqizhixin.com/articles/2019-04-06-2" target="_blank" rel="noopener">博文分享</a></li></ul></blockquote><p>下载地址：<a href="https://mathpix.com/" target="_blank" rel="noopener">https://mathpix.com/</a></p><h3 id="3-表格处理"><a href="#3-表格处理" class="headerlink" title="3.表格处理"></a>3.表格处理</h3><p>表格处理工具：<a href="http://www.tablesgenerator.com/" target="_blank" rel="noopener">LaTeX Tables Generator </a></p><h3 id="4-制作幻灯片"><a href="#4-制作幻灯片" class="headerlink" title="4.制作幻灯片"></a>4.制作幻灯片</h3><p>没错，LaTeX的确还可以制作精美的幻灯片pdf，不过具体使用方法与论文写作大同小异，网上也有很多漂亮的模板，有兴趣可以去继续了解。</p><p><a href="https://www.latexstudio.net/archives/category/tex-slides" target="_blank" rel="noopener">LaTex Beam主题模板</a></p><h3 id="5-插入矢量图片"><a href="#5-插入矢量图片" class="headerlink" title="5.插入矢量图片"></a>5.插入矢量图片</h3><p>PDF工具就用它了<strong>Adobe Acrobat</strong> 👍 , 包揽你常用的PDF内容编辑，页面裁剪，导出，生成PDF等多项功能！！</p><p> <a href="https://blog.csdn.net/xintingandzhouyang/article/details/82558235" target="_blank" rel="noopener">Adobe Acrobat安装</a></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>日常写作用轻量级的Markdown编辑器 <a href="https://typora.io/" target="_blank" rel="noopener"><strong>typora</strong></a>, 主页极其漂亮的同时，软件本身也非常简洁实用，功能强大。想要获得更为复杂和严谨的论文排版作品，上<strong>LaTeX</strong>，这样基本就能涵盖所有的写作场景，告别臃肿难用的word软件，让我们更专注于内容，享受其中。</p><p><strong>暂时就想到这些了，等想到了再更吧，Happy LaTeXing！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 软件安装与配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件安装与配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通道注意力机制-SENet</title>
      <link href="/2019/09/11/tong-dao-zhu-yi-li-ji-zhi-senet/"/>
      <url>/2019/09/11/tong-dao-zhu-yi-li-ji-zhi-senet/</url>
      
        <content type="html"><![CDATA[<h2 id="SENet"><a href="#SENet" class="headerlink" title="SENet"></a>SENet</h2><p>arXiv-Link： <a href="https://arxiv.org/abs/1709.01507" target="_blank" rel="noopener">Squeeze-and-Excitation Networks</a><br>Jie Hu, Li Shen, Gang Sun</p><a id="more"></a> <h4 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h4><p>卷积神经网络顾名思义就是依赖卷积操作，使用局部感受区域（local receptive field）的思想融合空间信息和通道信息来提取包含信息的特征。有很多工作从增强空间维度编码的角度来提升网络的表示能力，本文主要聚焦于通道维度，并提出一种新的结构单元——“Squeeze-and-Excitation(SE)”单元，对通道间的依赖关系进行建模，可以自适应的调整各通道的特征响应值。如果将SE block添加到之前的先进网络中，只会增加很小的计算消耗，但却可以极大地提升网络性能。依靠SENet作者获得了ILSVRC2017分类任务的第一名，top-5错误率为2.251%。</p><h4 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h4><p>每个卷积层有若干滤波器，可以学习表达包含所有通道的局部空间连接模式。也就是说，卷积滤波器提取局部感受区域中的空间和通道的融合信息。再加上非线性激活层和降采样层，CNN可以获得具有全局感受区域的分层模式来作为图像的描述。最近的一些工作表明，可以通过加入有助于获取空间相关性的学习机制来改善网络的性能，而且不需要额外的监督。例如Inception架构，通过在模块中加入多尺度处理来提高性能。另有探索更好的空间相关性的模型或者添加空间注意力的一些工作。</p><p>与上述方法不同，本文主要探索网络架构设计的另一个方面——通道关联性。本文提出一种新的网络单元——“Squeeze-and-Excitation(SE)” block，希望通过对各通道的依赖性进行建模以提高网络的表示能力，并且可以对特征进行逐通道调整，这样网络就可以学习通过全局信息来有选择性的加强包含有用信息的特征并抑制无用特征。<br>SE block的基本结构见图1。第一步squeeze操作，将各通道的全局空间特征作为该通道的表示，形成一个通道描述符；第二步excitation操作，学习对各通道的依赖程度，并根据依赖程度的不同对特征图进行调整，调整后的特征图就是SE block的输出。</p><p><img src="/2019/09/11/tong-dao-zhu-yi-li-ji-zhi-senet/Figure-1.png" alt></p><p>前面层中的SE block以类别无关（class agnostic）的方式增强可共享的低层表示的质量。越后面的层SE block越来越类别相关。SE block重新调整特征的益处可以在整个网络中积累。SE block设计简单，可以很容易地加入到已有的网络中，只增加少量的模型复杂度和计算开支，另外对不同数据集的泛化能力较强。作者依靠SENet取得了ILSVRC2017分类任务的第一名。官方实现（Caffe）源码地址：<a href="https://github.com/hujie-frank/SENet" target="_blank" rel="noopener">SENet官方实现</a> 。</p><h4 id="2-Related-Work"><a href="#2-Related-Work" class="headerlink" title="2. Related Work"></a>2. Related Work</h4><p><strong>Deep architectures</strong><br>有很多工作通过调整卷积神经网络架构使模型更容易地学习深层特征以提升模型性能。VGG和Inception网络证明可以通过增加深度来提升性能。Batch normalization (BN)在网络中添加可以调节输入数据的单元来稳定学习过程，改善梯度在网络中的传播，使得更深层的网络也可以工作。<a href="https://github.com/binLearning/caffe_toolkit/tree/master/ResNet" target="_blank" rel="noopener">ResNet</a>、<a href="https://github.com/binLearning/caffe_toolkit/tree/master/ResNet-v2" target="_blank" rel="noopener">ResNet-v2</a>在网络中加入恒等映射形式的跳跃连接，使网络学习残差函数，极大推进了网络架构向更深层的发展。<a href="https://github.com/binLearning/caffe_toolkit/tree/master/DenseNet" target="_blank" rel="noopener">DenseNet</a>、<a href="https://github.com/binLearning/caffe_toolkit/tree/master/DPN" target="_blank" rel="noopener">DPN</a>通过调整网络各层间的连接机制来提升深层网络的学习和表示性能。<br>另一个方向是调整网络中模块的形式。分组卷积（grouped convolutions）可以用于增加基数（cardinality），如Deep roots、<a href="https://github.com/binLearning/caffe_toolkit/tree/master/ResNeXt" target="_blank" rel="noopener">ResNeXt</a>中所示，网络可以学习到更丰富的表示。多分支卷积（multi-branch convolutions）可以视为分组卷积的泛化，网络模块可以进行更灵活多变的操作，如Inception系列。跨通道相关是一种新的特征组合方式，可以独立于空间结构（如Xception），或者使用1x1卷积进行处理（如NIN），一般来说这些工作主要是为了降低模型和计算复杂度。这种方法的前提假设是通道是实例无关（instance-agnostic）的，也就是说输出对于输入数据各通道的依赖性是相同的，不是类别相关的。与之相反，本文提出一种新的机制，使用全局信息对各通道动态的非线性的依赖性进行建模，可以改善学习过程并提升网络的表示能力。</p><p><strong>Attention and gating mechanisms</strong><br>注意力机制（attention）引导计算资源偏向输入信号中信息量最大的部分，近几年开始大量用于深度神经网络中，在很多任务中对性能有极大提升。它一般是和门限函数（如softmax、sigmoid）或者序列方法联合使用。highway网络使用门限机制来调节快捷连接，Residual attention network for image classification中介绍了一种trunk-and-mask注意力机制用于沙漏模型（hourglass module），成功的用于语义分割任务。SE block是一种轻量级的门限机制，专门用于对各通道的关联性进行建模。</p><h4 id="3-Squeeze-and-Excitation-Blocks"><a href="#3-Squeeze-and-Excitation-Blocks" class="headerlink" title="3. Squeeze-and-Excitation Blocks"></a>3. Squeeze-and-Excitation Blocks</h4><p>卷积层的输出并没有考虑对各通道的依赖性，本文的目标就是让网络有选择性的增强信息量大的特征，使得后续处理可以充分利用这些特征，并对无用特征进行抑制。</p><h4 id="3-1-Squeeze-Global-Information-Embedding"><a href="#3-1-Squeeze-Global-Information-Embedding" class="headerlink" title="3.1 Squeeze: Global Information Embedding"></a>3.1 Squeeze: Global Information Embedding</h4><p>首先考察输出特征每个通道的信号，压缩（squeeze）全局空间信息为通道描述符，使用全局平均池化来生成各通道的统计量。</p><h4 id="3-2-Excitation-Adaptive-Recalibration"><a href="#3-2-Excitation-Adaptive-Recalibration" class="headerlink" title="3.2 Excitation: Adaptive Recalibration"></a>3.2 Excitation: Adaptive Recalibration</h4><p>第二就是考察各通道的依赖程度，实现函数有两个标准：一是要灵活，二是要学习一个非互斥的关系，因为可能多个通道都会对结果有影响。本文使用带sigmoid激活函数的门限机制来实现。为了限制模型复杂度并增强泛化能力，门限机制中使用bottleneck形式的两个全连接层，第一个FC层降维至1/r，r为超参数，本文取16，具体见6.3实验。最后的sigmoid函数就是各通道的权重，根据输入数据调节各通道特征的权重，有助于增强特征的可分辨性。</p><h4 id="3-3-Exemplars-SE-Inception-and-SE-ResNet"><a href="#3-3-Exemplars-SE-Inception-and-SE-ResNet" class="headerlink" title="3.3 Exemplars: SE-Inception and SE-ResNet"></a>3.3 Exemplars: SE-Inception and SE-ResNet</h4><p>在Inception网络和ResNet网络中加入SE block，具体见图2、图3。</p><p><img src="/2019/09/11/tong-dao-zhu-yi-li-ji-zhi-senet/Figure-2.png" alt></p><p><img src="/2019/09/11/tong-dao-zhu-yi-li-ji-zhi-senet/Figure-3.png" alt></p><h4 id="4-Model-and-Computational-Complexity"><a href="#4-Model-and-Computational-Complexity" class="headerlink" title="4. Model and Computational Complexity"></a>4. Model and Computational Complexity</h4><p>对添加了SE block的网络的具体配置见表1。</p><p><img src="/2019/09/11/tong-dao-zhu-yi-li-ji-zhi-senet/Figure-4.png" alt></p><p>每个SE block中包含一个全局平均池化操作，两个小的全连接层，最后一个简单的逐通道缩放操作，全部合起来在ResNet-50的基础上增加了0.26%的计算量。新添加的参数量主要来自于两个全连接层，ResNet-50增加了约10%，大多数都是来自最后阶段，此时的通道维度很大。但是实验发现如果去掉最后阶段的SE block性能并没有太大影响，而新增加的参数量则会减小到约4%。</p><h4 id="5-Implementation"><a href="#5-Implementation" class="headerlink" title="5. Implementation"></a>5. Implementation</h4><p>基本都是常规处理和训练设置。采用了Relay backpropagation for effective learning of deep convolutional neural networks中的数据平衡策略。</p><h4 id="6-Experiments"><a href="#6-Experiments" class="headerlink" title="6. Experiments"></a>6. Experiments</h4><h4 id="6-1-ImageNet-Classification"><a href="#6-1-ImageNet-Classification" class="headerlink" title="6.1 ImageNet Classification"></a>6.1 ImageNet Classification</h4><p>本文实验的不同网络的配置见表2，训练曲线见图4-6。 </p><p><img src="/2019/09/11/tong-dao-zhu-yi-li-ji-zhi-senet/Figure-5.png" alt></p><p><img src="/2019/09/11/tong-dao-zhu-yi-li-ji-zhi-senet/Figure-6.png" alt></p><p><img src="/2019/09/11/tong-dao-zhu-yi-li-ji-zhi-senet/Figure-7.png" alt></p><p><img src="/2019/09/11/tong-dao-zhu-yi-li-ji-zhi-senet/Figure-8.png" alt></p><p>在ImageNet验证集上不同网络的表现见表3。</p><p><img src="/2019/09/11/tong-dao-zhu-yi-li-ji-zhi-senet/Figure-9.png" alt></p><h4 id="6-2-Scene-Classification"><a href="#6-2-Scene-Classification" class="headerlink" title="6.2 Scene Classification"></a>6.2 Scene Classification</h4><p>不同网络的性能对比见表4。</p><p><img src="/2019/09/11/tong-dao-zhu-yi-li-ji-zhi-senet/Figure-10.png" alt></p><h4 id="6-3-Analysis-and-Discussion"><a href="#6-3-Analysis-and-Discussion" class="headerlink" title="6.3 Analysis and Discussion"></a>6.3 Analysis and Discussion</h4><p><strong>Reduction ratio</strong><br>3.2中讨论的降维系数是超参数，它不同取值对网络性能的影响见表5。</p><p><img src="/2019/09/11/tong-dao-zhu-yi-li-ji-zhi-senet/Figure-11.png" alt></p><p>为了权衡准确率与复杂度，本文选取r=16。<br><strong>The role of Excitation</strong><br>考察自门限（self-gating）excitation机制。选取四个类别（如图7），分别考察不同层中的SE block的平均激活值，其分布如图8所示。</p><p><img src="/2019/09/11/tong-dao-zhu-yi-li-ji-zhi-senet/Figure-12.png" alt></p><p><img src="/2019/09/11/tong-dao-zhu-yi-li-ji-zhi-senet/Figure-13.png" alt></p><p>通过观察图8中不同层SE block激活值的分布情况，发现1)前面层中的分布基本一样，说明这一阶段的特征是类别无关的；2)后续层中分布越来越类别相关，每个类别对特征由不同的选择；3)SE_5_2和SE_5_3中的分布也基本一致，说明这两层对网络重新调整的重要性不高，可以去掉这两层中的SE block以减少参数量，如第4章中所述。</p><h4 id="7-Conclusion"><a href="#7-Conclusion" class="headerlink" title="7. Conclusion"></a>7. Conclusion</h4><p>SE block根据输入动态调整各通道的特征，增强网络的表示能力。另外也可以用于辅助网络修剪/压缩的工作。</p>]]></content>
      
      
      <categories>
          
          <category> Paper Reading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机视觉 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习GPU环境搭建-下篇</title>
      <link href="/2019/09/11/shen-du-xue-xi-gpu-huan-jing-da-jian-xia-pian/"/>
      <url>/2019/09/11/shen-du-xue-xi-gpu-huan-jing-da-jian-xia-pian/</url>
      
        <content type="html"><![CDATA[<h4 id="本节详细说明一下最新GPU深度学习平台环境配置"><a href="#本节详细说明一下最新GPU深度学习平台环境配置" class="headerlink" title="本节详细说明一下最新GPU深度学习平台环境配置"></a>本节详细说明一下最新GPU深度学习平台环境配置</h4><blockquote><p><strong>Ubuntu16+RTX2080Ti+CUDA10+Python3.6+Pytorch1.2</strong></p></blockquote><a id="more"></a> <h4 id="服务器环境"><a href="#服务器环境" class="headerlink" title="服务器环境"></a>服务器环境</h4><pre class="line-numbers language-bash"><code class="language-bash">Ubuntu: 16.04 64bitNvidia driver 410Anaconda: 3python3.6CUDA: 10.0cuDNN: 7.4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-安装Linux系统"><a href="#1-安装Linux系统" class="headerlink" title="1.安装Linux系统"></a>1.安装Linux系统</h4><p>需要从网上下载ubuntu系统，并制作安装U盘。</p><ul><li>准备工作。制作Ubuntu系统启动U盘，可参考<a href="https://blog.csdn.net/fesdgasdgasdg/article/details/54183577" target="_blank" rel="noopener">链接</a></li><li>U盘启动安装，开机按delete或f2进入BIOS，更改启动方式，U盘启动</li><li>进入ubuntun选择试用不安装，进入之前的unbuntun系统，备份home盘数据（如果不备份，重装系统数据会清除）。</li><li>U盘启动，选择install unbuntun. 选择英文，图形界面不勾选，installtion type 选择 something else。 注：如果是安装双系统，不要选择第二项 擦除数据，这会把之前系统盘文件全部删除。<br>参考博客<a href="https://blog.csdn.net/fesdgasdgasdg/article/details/54183577?tdsourcetag=s_pcqq_aiomsg" target="_blank" rel="noopener">https://blog.csdn.net/fesdgasdgasdg/article/details/54183577?tdsourcetag=s_pcqq_aiomsg</a></li><li>进入unbuntun系统，图形分辨率字很大，不用担心，因为没安装显卡驱动原因。<br>安装对应显卡驱动</li><li>安装完显卡驱动，你将拥有全新的unbuntun系统，则可以进行你常用的环境配置与软件安装，以自身需求，介绍一下要用到的深度学习环境和常用软件安装。安装常用软件 谷歌浏览器，搜狗输入法，notepad++, 为知笔记，pycharm, anaconda, cuda,opencv pytorch tensorflow 配置VPN，teamviewer 等。<br>cuda+cudnn,参考链接<a href="https://blog.csdn.net/gdengden/article/details/89399653" target="_blank" rel="noopener">https://blog.csdn.net/gdengden/article/details/89399653</a></li></ul><h4 id="2-安装英伟达NVIDIA驱动"><a href="#2-安装英伟达NVIDIA驱动" class="headerlink" title="2.安装英伟达NVIDIA驱动"></a>2.安装英伟达NVIDIA驱动</h4><p>1.禁用nouveau</p><p>安装NVIDIA需要把系统自带的驱动禁用，打开文件：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> vim /etc/modprobe.d/blacklist.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在文本最后添加以下内容：</p><pre class="line-numbers language-bash"><code class="language-bash">blacklist nouveauoptions nouveau modeset<span class="token operator">=</span>0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>命令窗口会提示warning，忽略即可。保存退出，执行以下命令生效：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> update-initramfs -u<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重启后，执行以下命令：</p><pre class="line-numbers language-bash"><code class="language-bash">lsmod <span class="token operator">|</span> <span class="token function">grep</span> nouveau<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果没有屏幕输出，说明禁用nouveau成功</p><p>2.下载驱动文件</p><p>安装好linux系统后，对于RTX2080ti来说，Nvidia driver 384已经不适合了，请从<a href="https://link.zhihu.com/?target=https%3A//www.nvidia.com/Download/index.aspx" target="_blank" rel="noopener">官方网站</a>下载和自己的显卡适配的驱动文件，是.run文件，下载地址:<a href="https://www.nvidia.cn/Download/index.aspx" target="_blank" rel="noopener">Download Drivers</a></p><p>下载完成之后会得到一个安装包，不同版本文件名可能不一样：</p><pre class="line-numbers language-bash"><code class="language-bash">NVIDIA-Linux-x86_64-410.93.run<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.卸载原有的NVIDIA驱动（<strong>没装的话就跳过第3步</strong>）</p><p>操作都需要在命令界面操作，执行以下快捷键进入命令界面，并登录：</p><pre class="line-numbers language-bash"><code class="language-bash">Ctrl-Alt+F1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行以下命令禁用<strong>X-Window</strong>服务，否则无法安装显卡驱动：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> lightdm stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行以下三条命令卸载原有显卡驱动：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> remove --purge nvidia*<span class="token function">sudo</span> <span class="token function">chmod</span> +x NVIDIA-Linux-x86_64-410.93.run<span class="token function">sudo</span> ./NVIDIA-Linux-x86_64-410.93.run --uninstall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4.安装新驱动</p><p>直接执行驱动文件即可安装新驱动，一直默认即可：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> ./NVIDIA-Linux-x86_64-410.93.run<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行以下命令启动<strong>X-Window</strong>服务:</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> lightdm start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后执行重启命令，重启系统即可：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">reboot</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成后，查看驱动版本：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> dpkg --list <span class="token operator">|</span> <span class="token function">grep</span> nvidia-*nvidia-smi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>不出意外说明显卡驱动成功安装，后面继续安装cuda.</p><p>特别注意：<strong>如果系统重启之后出现重复登录的情况，多数情况下都是安装了错误版本的显卡驱动</strong>。需要下载对应本身机器安装的显卡版本。</p><h4 id="3-安装CUDA"><a href="#3-安装CUDA" class="headerlink" title="3.安装CUDA"></a>3.安装CUDA</h4><p>1.卸载旧的CUDA</p><p>这是因为如果您的显卡RTX2080，安装了CUDA 8.0 和 CUDNN 7.0.5或者CUDA9.0不能够正常使用，需要安装CUDA 10.0 和 CUDNN 7.4.2，所以要先卸载原来的CUDA。注意以下的命令都是在root用户下操作的。</p><p>卸载CUDA很简单，主要执行的是CUDA自带的卸载脚本，请根据自己的cuda版本找到卸载脚本：</p><p>如果之前安装了CUDA 9.0在 /usr/local/cuda-9.0/bin 目录下有一个 uninstall_cuda*.pl 文件，CUDA8卸载同理，可以直接运行卸载，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> /usr/local/cuda-9.0/bin/uninstall_cuda_9.0.pl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>卸载之后，还有一些残留的文件夹，如果之前安装的是CUDA 9.0，可以一并删除：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">rm</span> -r /usr/local/cuda-9.0/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样即可将 CUDA 全部卸载。</p><p>2.安装CUDA</p><p>安装的CUDA10.0和CUDNN7.4.2版本：</p><p>接下来的安装步骤都是在<strong>root用户</strong>下操作的。</p><ul><li>下载和安装CUDA</li></ul><p>我们可以在官网：<a href="https://developer.nvidia.com/cuda-downloads?target_os=Linux&target_arch=x86_64&target_distro=Ubuntu&target_version=1604&target_type=runfilelocal" target="_blank" rel="noopener">CUDA10下载页面</a>，<br>下载符合自己系统版本的CUDA。</p><p>cd 到下载的文件目录.run文件下，root下安装</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> +x cuda_10.0.130_410.48_linux.run // 获取权限<span class="token function">sudo</span> sh cuda_10.0.130_410.48_linux.run   // 执行安装包，开始安装<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>开始安装之后，需要阅读说明，可以使用<code>Ctrl + C</code>直接阅读完成，或者使用<code>空格键</code>慢慢阅读。然后进行配置，这里说明一下：</p><p>注意：为了避免问题，不要选择安装CUDA下的显卡驱动，其他选yes</p><pre class="line-numbers language-bash"><code class="language-bash">（是否同意条款，必须同意才能继续安装）accept/decline/quit: accept（这里不要安装驱动，因为已经安装最新的驱动了，否则可能会安装旧版本的显卡驱动，导致重复登录的情况）Install NVIDIA Accelerated Graphics Driver <span class="token keyword">for</span> Linux-x86_64 410.48?<span class="token punctuation">(</span>y<span class="token punctuation">)</span>es/<span class="token punctuation">(</span>n<span class="token punctuation">)</span>o/<span class="token punctuation">(</span>q<span class="token punctuation">)</span>uit: nInstall the CUDA 10.0 Toolkit?（是否安装CUDA 10 ，这里必须要安装）<span class="token punctuation">(</span>y<span class="token punctuation">)</span>es/<span class="token punctuation">(</span>n<span class="token punctuation">)</span>o/<span class="token punctuation">(</span>q<span class="token punctuation">)</span>uit: yEnter Toolkit Location（安装路径，使用默认，直接回车就行） <span class="token punctuation">[</span> default is /usr/local/cuda-10.0 <span class="token punctuation">]</span>:  Do you want to <span class="token function">install</span> a symbolic <span class="token function">link</span> at /usr/local/cuda?（同意创建软链接）<span class="token punctuation">(</span>y<span class="token punctuation">)</span>es/<span class="token punctuation">(</span>n<span class="token punctuation">)</span>o/<span class="token punctuation">(</span>q<span class="token punctuation">)</span>uit: yInstall the CUDA 10.0 Samples?（不用安装测试，本身就有了）<span class="token punctuation">(</span>y<span class="token punctuation">)</span>es/<span class="token punctuation">(</span>n<span class="token punctuation">)</span>o/<span class="token punctuation">(</span>q<span class="token punctuation">)</span>uit: nInstalling the CUDA Toolkit <span class="token keyword">in</span> /usr/local/cuda-10.0 <span class="token punctuation">..</span>.（开始安装）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装完成之后，可以配置他们的环境变量，打开.bashrc 文件：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> gedit ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开文件后将下面代码加入文件最后，cuda位置，要根据自己cuda版本安装路径:</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">export</span> CUDA_HOME<span class="token operator">=</span>/usr/local/cuda-10.0<span class="token function">export</span> LD_LIBRARY_PATH<span class="token operator">=</span><span class="token variable">${CUDA_HOME}</span>/lib64:<span class="token variable">${LDLIBRARY_PATH}</span><span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">${CUDA_HOME}</span>/bin:<span class="token variable">${PATH}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>保存 关闭，命令行输入,使配置生效：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">source</span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>终端输入：</p><pre class="line-numbers language-bash"><code class="language-bash">nvcc --version  或   nvcc -V<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会输出CUDA的版本信息，cuda安装成功。</p><h4 id="4-下载和安装cuDNN"><a href="#4-下载和安装cuDNN" class="headerlink" title="4.下载和安装cuDNN"></a>4.下载和安装cuDNN</h4><p>1.官网下载：<a href="https://developer.nvidia.com/rdp/cudnn-download" target="_blank" rel="noopener">https://developer.nvidia.com/rdp/cudnn-download</a><br>进入时需要登录，没有账户的话就注册一个，进入即可。选择和自己cuda适配的版本。</p><p>2.解压下载好的cudnn压缩包，如：</p><p>cudnn-10.0-linux-x64-v7.4.2.24.tgz 或者 cudnn-10.0-linux_x64-v7.6.0.64.tgz</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> -zxvf cudnn-10.0-linux-x64-v7.4.2.24.tgz <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解压之后可以得到以下文件：</p><pre class="line-numbers language-bash"><code class="language-bash">cuda/include/cudnn.hcuda/NVIDIA_SLA_cuDNN_Support.txtcuda/lib64/libcudnn.socuda/lib64/libcudnn.so.7cuda/lib64/libcudnn.so.7.4.2cuda/lib64/libcudnn_static.a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用以下命令复制这些文件到CUDA目录下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">cp</span> cuda/include/cudnn.h /usr/local/cuda-10.0/include/<span class="token function">sudo</span> <span class="token function">cp</span> cuda/lib64/libcudnn* /usr/local/cuda-10.0/lib64/<span class="token function">sudo</span> <span class="token function">chmod</span> a+r /usr/local/cuda-10.0/include/cudnn.h<span class="token function">sudo</span> <span class="token function">chmod</span> a+r /usr/local/cuda-10.0/lib64/libcudnn*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3.查看cudnn版本，可以使用以下命令查看CUDNN的版本信息</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cat</span> /usr/local/cuda/include/cudnn.h <span class="token operator">|</span> <span class="token function">grep</span> CUDNN_MAJOR -A 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装好cuda和cudnn之后，恭喜你，就可以安装tensorflow、pytorch等深度学习框架了。</p><h4 id="5-安装Anaconda3"><a href="#5-安装Anaconda3" class="headerlink" title="5.安装Anaconda3"></a>5.安装Anaconda3</h4><p>这里使用 Anaconda 3 来安装，下载地址：<a href="https://www.anaconda.com/download/#linux，点击" target="_blank" rel="noopener">https://www.anaconda.com/download/#linux，点击</a> Download 按钮下载即可，这里下载的是 Anaconda 3-5.1 版本，如果下载速度过慢,强烈建议选择使用<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/" target="_blank" rel="noopener">清华镜像</a> 。</p><p>下载下来之后目录下会出现一个 Anaconda3-5.1.0-Linux-x86_64.sh 文件，然后直接执行即可安装：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">bash</span> Anaconda3-5.1.0-Linux-x86_64.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行完毕之后按照默认设置走下来即可完成安装。</p><p>这里默认它会安装到用户目录下，如果想全局安装，可以在这一步输入你要安装的地址：</p><pre class="line-numbers language-bash"><code class="language-bash">Anaconda3 will now be installed into this location:/home/wy/anaconda3  - Press ENTER to confirm the location  - Press CTRL-C to abort the installation  - Or specify a different location below<span class="token punctuation">[</span>/home/wy/anaconda3<span class="token punctuation">]</span> <span class="token operator">>></span><span class="token operator">></span> /usr/local/anaconda3PREFIX<span class="token operator">=</span>/usr/local/anaconda3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我指定了将其安装到 /usr/local/anaconda3 目录下，全局安装，所有用户共享，当然如果只想本用户使用的话使用默认配置即可。</p><p>安装完成之后添加 python3 和 pip3 的软链接：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">ln</span> -s /usr/local/anaconda3/bin/python3 /usr/local/sbin/python3<span class="token function">sudo</span> <span class="token function">ln</span> -s /usr/local/anaconda3/bin/pip /usr/local/sbin/pip3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里是将软连接其添加到 /usr/local/sbin 目录下了，它默认会存在于环境变量中，因此可以直接调用。</p><p>当然也可以选择把 /usr/local/anaconda3/bin 目录添加到环境变量中，具体地，可以修改 ~/.bashrc 文件，添加如下内容：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">export</span> PATH<span class="token operator">=</span>/usr/local/anaconda3/bin<span class="token variable">${PATH:+:${PATH}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后执行：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">source</span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即可生效，下次登录时也会默认执行 ~/.bashrc 文件，也会生效。</p><p>接下来我们验证下 python3、pip3 命令是否都来自 Anaconda，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">pip3 -Vpip 9.0.1 from /usr/local/anaconda3/lib/python3.6/site-packages <span class="token punctuation">(</span>python 3.6<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">which</span> python3/usr/local/anaconda3/bin/python3python3Python 3.6.4 <span class="token operator">|</span>Anaconda, Inc.<span class="token operator">|</span> <span class="token punctuation">(</span>default, Jan 16 2018, 18:10:19<span class="token punctuation">)</span> <span class="token punctuation">[</span>GCC 7.2.0<span class="token punctuation">]</span> on linuxType <span class="token string">"help"</span>, <span class="token string">"copyright"</span>, <span class="token string">"credits"</span> or <span class="token string">"license"</span> <span class="token keyword">for</span> <span class="token function">more</span> information.<span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果输入 pip3 和 python3 命令能出现如上类似结果，路径都在 /usr/local/anaconda3，就证明 Python 3 安装成功了。</p><h4 id="6-安装TensorFlow-1-8"><a href="#6-安装TensorFlow-1-8" class="headerlink" title="6.安装TensorFlow 1.8"></a>6.安装TensorFlow 1.8</h4><p>到现在为止 Python 3.6、CUDA 10.0 和 cuDNN 7.14就已经安装好了，而且环境变量也配置好了，接下来我们直接安装 TensorFlow 1.8 即可。</p><p>这里需要安装的是 TensorFlow 的 GPU 版本，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">pip3 <span class="token function">install</span> tensorflow-gpu<span class="token operator">==</span>1.8.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你会发现上面安装特别慢，强烈建议使用 <a href="https://mirrors.tuna.tsinghua.edu.cn/help/pypi/" target="_blank" rel="noopener">国内pypi源加速</a> , 速度超快啊！！！</p><pre class="line-numbers language-bash"><code class="language-bash">pip3 <span class="token function">install</span> tensorflow-gpu<span class="token operator">==</span>1.8.0 -i https://pypi.tuna.tsinghua.edu.cn/simple<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成之后验证一下：</p><pre class="line-numbers language-python"><code class="language-python">python<span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tftf<span class="token punctuation">.</span>__version__tf<span class="token punctuation">.</span>__path__<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果没有报错，那就证明全部环境配置都成功了。</p><p>如果您的tensorflow安装后不能使用，请考虑<strong>tensorflow版本和CUDA、cuDNN版本的兼容问题</strong>，请自行百度, 也可参考本博文下方链接。</p><h4 id="7-Pytorch-1-2"><a href="#7-Pytorch-1-2" class="headerlink" title="7.Pytorch 1.2"></a>7.Pytorch 1.2</h4><p>安装过程中注意：torch和torchvision版本相匹配</p><pre class="line-numbers language-bash"><code class="language-bash">如不匹配，可能报错：torchvision 0.3.0 has requirement torch<span class="token operator">>=</span>1.1.0, but you'll have torch 1.0.0 <span class="token function">which</span> is incompatible.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>RTX 2080Ti，CUDA安装版本10及以上，</p><p><strong>方案一：</strong> <strong>通过pytorch官发链接pip装</strong>，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">pip3 <span class="token function">install</span> https://download.pytorch.org/whl/cu100/torch-1.0.0-cp36-cp36m-linux_x86_64.whl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现速度实在太慢！！于是我们考虑</p><p><strong>方案二：</strong> <strong>离线安装</strong>：</p><p>注意方案一 <strong>在控制台出现的下载路径</strong>，复制到浏览器，手动下载：</p><p>到官网下载torch1.1：<a href="https://download.pytorch.org/whl/cu100/torch-1.1.0-cp36-cp36m-linux_x86_64.whl" target="_blank" rel="noopener">https://download.pytorch.org/whl/cu100/torch-1.1.0-cp36-cp36m-linux_x86_64.whl</a> ，将本地文件上传到服务器指定位置，路径换到压缩包所在位置，在控制台输入指令：</p><pre class="line-numbers language-bash"><code class="language-bash">pip3 <span class="token function">install</span> torch-1.1.0-cp36-cp36m-linux_x86_64.whlpip3 <span class="token function">install</span> torchvision<span class="token operator">==</span>0.3.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>方案三：</strong> <strong>以上两种方案纯属呵呵</strong>🙂，强烈建议使用 <a href="https://mirrors.tuna.tsinghua.edu.cn/help/pypi/" target="_blank" rel="noopener"><strong>国内pypi源加速</strong></a> , 直接安装pytorch最新版本，最新版本做了诸多优化！通过<strong>pypi镜像安装</strong>速度超快啊  ★★★★★</p><pre class="line-numbers language-bash"><code class="language-bash">pip3 <span class="token function">install</span> torch torchvision -i https://pypi.tuna.tsinghua.edu.cn/simple<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就安装好啦，然后测试一下, 会输出<code>torch版本1.2.0，torchvision版本0.4.0</code>：</p><pre class="line-numbers language-bash"><code class="language-bash">python<span class="token function">import</span> torch,torchvisiontorch.__version__torchvision.__version__torch.__path__torchvision.__path__<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上便是 <code>Ubuntu 16.04 + RTX 2080 Ti + Python 3.6 + CUDA 10.0 + cuDNN 7.4 + TensorFlow 1.8 + Pytorch 1.2</code>等 完整环境配置过程。</p><h4 id="他山之石："><a href="#他山之石：" class="headerlink" title="他山之石："></a>他山之石：</h4><ul><li><a href="https://blog.csdn.net/weixin_42718092/article/details/86016973" target="_blank" rel="noopener">Ubuntu下安装CUDA10.0遇到的问题（一定要注意自己版本）</a></li><li><a href="https://blog.csdn.net/omodao1/article/details/83241074" target="_blank" rel="noopener">Tensorflow不同版本要求与CUDA及cuDNN版本对应关系</a></li><li><a href="https://www.jianshu.com/p/6f3871877b59" target="_blank" rel="noopener">ubuntu 18.04 安装后基本配置以及常用软件安装</a></li><li><a href="https://dl.ypw.io/" target="_blank" rel="noopener">深度学习工程师生存指南</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 深度学习环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>科研工具</title>
      <link href="/2019/08/27/ke-yan-gong-ju/"/>
      <url>/2019/08/27/ke-yan-gong-ju/</url>
      
        <content type="html"><![CDATA[<h3 id="Some-tips-for-research-and-coding"><a href="#Some-tips-for-research-and-coding" class="headerlink" title="Some tips for research and coding"></a>Some tips for research and coding</h3><p>本博文正在丰富内容～～～😄</p><h4 id="1-科研起步"><a href="#1-科研起步" class="headerlink" title="1. 科研起步"></a>1. 科研起步</h4><h5 id="必读文章"><a href="#必读文章" class="headerlink" title="必读文章"></a>必读文章</h5><ul><li>1.<a href="http://karpathy.github.io/2016/09/07/phd/" target="_blank" rel="noopener">Karpathy-博士经验</a> <a href="https://m.sohu.com/a/125259752_465975/?pvid=000115_3w_a" target="_blank" rel="noopener">(翻译)</a> 重点</li><li>2.<a href="https://zhuanlan.zhihu.com/p/74779853" target="_blank" rel="noopener">陈天奇-科研十年</a></li><li>3.<a href="https://mp.weixin.qq.com/s/e78zRIgdEtGLKiqYcRJLHQ" target="_blank" rel="noopener">王一-科研idea</a></li><li>4.<a href="https://zhuanlan.zhihu.com/p/50597445" target="_blank" rel="noopener">王赟-我的八年博士生涯</a></li><li>5.<a href="https://zhuanlan.zhihu.com/p/25099638" target="_blank" rel="noopener">李沐-博士这五年</a></li><li>6.<a href="https://mp.weixin.qq.com/s/j8EuhusTNlE60m8IC4ftGA" target="_blank" rel="noopener">毕业撒花</a></li><li>7.<a href="https://www.doc.ic.ac.uk/research/phd/phdmatters/handbook_PhD_2018.pdf" target="_blank" rel="noopener">帝国理工-博士手册（Doctoral Milestones）</a></li></ul><a id="more"></a> <h5 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h5><ul><li><p>1.<a href="https://scholar.google.co.uk/scholar?hl=en&as_sdt=0%2C5&q=semantic+image+synthesis+via+adversarial+learning&btnG=" target="_blank" rel="noopener">Google Scholar 如何查询相关文章</a></p></li><li><p>2.<a href="https://scholar.google.co.uk/citations?user=xLFL4sMAAAAJ&hl=en" target="_blank" rel="noopener">Google Scholar 如何follow研究者</a></p><ul><li><blockquote><p>谷歌学术：<a href="https://www.google.com.hk" target="_blank" rel="noopener">https://www.google.com.hk</a>    谷歌学术镜像：<a href="http://xilesou.99lb.net/" target="_blank" rel="noopener">http://xilesou.99lb.net/</a>    、   <a href="https://xue.glgoo.org/" target="_blank" rel="noopener">https://xue.glgoo.org/</a>  </p></blockquote></li></ul></li><li><p>3.<a href="http://dblp.org/" target="_blank" rel="noopener"><strong>计算机相关论文免翻墙直连检索DBLP</strong></a></p><ul><li><blockquote><p>也可通过 <a href="https://dblp.uni-trier.de/" target="_blank" rel="noopener">https://dblp.uni-trier.de/</a> 访问.</p></blockquote></li></ul></li><li><p>4.<a href="https://arxiv.org" target="_blank" rel="noopener"><strong>arXiv预印本</strong></a></p><ul><li><blockquote><p><a href="https://links.jianshu.com/go?to=http%3A%2F%2Farxiv.org%2Flist%2Fcs.CV%2Frecent" target="_blank" rel="noopener">http://arxiv.org/list/cs.CV/recent</a>   看最近一周的论文; 使用<a href="https://links.jianshu.com/go?to=http%3A%2F%2Farxiv.org%2Flist%2Fcs.CV%2F1704" target="_blank" rel="noopener">http://arxiv.org/list/cs.CV/1704</a>，可以查看17年04月的全部内容了; 使用<a href="https://links.jianshu.com/go?to=http%3A%2F%2Farxiv.org%2Flist%2Fcs.CV%2F17" target="_blank" rel="noopener">http://arxiv.org/list/cs.CV/17</a>，可以查看17年的所有内容，其余搜索也类似。</p></blockquote></li></ul></li><li><p>5.<a href="xxx.itp.ac.cn/">arXiv中国镜像</a></p><ul><li><blockquote><p>使用技巧：如 <a href="https://arxiv.org/pdf/1512.03385.pdf" target="_blank" rel="noopener">https://arxiv.org/pdf/1512.03385.pdf</a> 下载很慢，换成 <a href="http://xxx.itp.ac.cn/pdf/1512.03385.pdf" target="_blank" rel="noopener">http://xxx.itp.ac.cn/pdf/1512.03385.pdf</a>, 即可体验光速下载。注意 https 要换成 http</p></blockquote></li></ul></li><li><p>6.<a href="https://www.semanticscholar.org/" target="_blank" rel="noopener">语义学者(Semantic Scholar)免费学术搜索引擎</a></p></li><li><p>7.<a href="http://www.arxiv-sanity.com" target="_blank" rel="noopener">arXiv-sanity人工智能论文检索引擎</a></p></li><li><p>8.<a href="http://arxiv-vanity/" target="_blank" rel="noopener">arXiv-vanity将来自 arXiv 的论文渲染成响应式网页</a></p></li><li><p>9.<a href="https://links.jianshu.com/go?to=http%3A%2F%2Fwww.las.cas.cn%2Fxwzx%2Fzhxw%2F201412%2Ft20141211_4273170.html" target="_blank" rel="noopener">arXiv链接中科院文献情报中心开发的arXiv文献检索平台</a></p></li><li><p>10.<a href="https://paperswithcode.com/" target="_blank" rel="noopener"><strong>Papers With Code</strong></a></p><ul><li><blockquote><p>自动把论文连接到实现代码的 GitHub 资源库和数据集，并根据 GitHub 的收藏量排序。每篇论文可能有多个合并的条目，可快速了解领域进展。</p></blockquote></li></ul></li><li><p>11.<a href="https://ieeexplore.ieee.org/Xplore/home.jsp" target="_blank" rel="noopener">IEEE会议或期刊论文检索</a></p></li><li><p>12.<a href="https://sci-hub.se" target="_blank" rel="noopener">sci-hub文献下载站</a> 例如输入这个：<a href="https://ieeexplore.ieee.org/document/8070331/" target="_blank" rel="noopener">https://ieeexplore.ieee.org/document/8070331/</a></p></li><li><p>13.<a href="http://tongtianta.site/paper/2881" target="_blank" rel="noopener">论文在线翻译网页-通天塔</a></p></li><li><p>14.<a href="https://jackietseng.github.io/conference_call_for_paper/conferences-with-ccf.html" target="_blank" rel="noopener">2019-2020 International Conferences in  Artificial Intelligence, Machine Learning, Computer Vision, Data Mining,  Natural Language Processing and Robotics</a></p></li><li><p>15.<a href="https://www.mendeley.com" target="_blank" rel="noopener">mendeley 文章整理APP</a></p><ul><li><blockquote><p>科研必备的浏览器插件+文献工具：链接：<a href="https://pan.baidu.com/s/1w2Xa30hOvo1aMhpiJCmceg" target="_blank" rel="noopener">https://pan.baidu.com/s/1w2Xa30hOvo1aMhpiJCmceg</a> 提取码：7j6b </p><p>TeXstudio + TeX Live论文撰写工具礼包：链接：<a href="https://pan.baidu.com/share/init?surl=5dYyDflQCPVz_jlwEkngUw" target="_blank" rel="noopener">https://pan.baidu.com/share/init?surl=5dYyDflQCPVz_jlwEkngUw</a>   提取码：hz3r</p></blockquote></li></ul></li><li><p>16.<a href="https://mattdeitke.github.io/CVPR-2019/" target="_blank" rel="noopener"><strong>2019 CVPR Accepted Papers分类检索</strong></a></p></li><li><p>17.<a href="https://github.com/scutan90/DeepLearning-500-questions/" target="_blank" rel="noopener"><strong>深度学习500问</strong></a></p></li><li><p>18.<a href="https://dl.ypw.io/" target="_blank" rel="noopener"><strong>深度学习工程师生存指南 👍</strong></a></p></li></ul><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><ul><li>1.<a href="https://github.com/getlantern/forum" target="_blank" rel="noopener">蓝灯</a> 邀请码 Y238YKH</li><li>2.<a href="https://www.lcdhgy.com" target="_blank" rel="noopener">旋风 APP</a></li></ul><h4 id="2-Github"><a href="#2-Github" class="headerlink" title="2. Github"></a>2. Github</h4><ul><li>Github历史和目的</li><li>创建账号</li><li>建立Repository</li><li>git init 初始化</li><li>git add xxx.txt 添加xxx.txt到git</li><li>git add -A 添加所有文件到git</li><li>git commit -m “hahahah” 添加注释</li><li>git push 上传更新</li><li>git clone <a href="https://github.com/account/repository.git" target="_blank" rel="noopener">https://github.com/account/repository.git</a></li><li>git status 查询状态</li><li>如何在网站上修改</li><li>git pull 与Github同步</li><li>git branch 查看branch</li><li>git branch -a 查看所有branch</li><li>git branch new 创建branch名为new</li><li>git checkout new 进入new branch</li><li>git checkout master 返回主branch</li><li>git checkout -b new2 创建并进入branch名为new2</li><li>修改branch后，commit到Github上，如何在github上发起Push Request</li><li>.gitignore 自定义不能被添加的文件</li><li>添加collaborator</li><li>新建organization</li><li><strong>练习：建立自己的个人主页</strong></li></ul><h4 id="3-GPU"><a href="#3-GPU" class="headerlink" title="3. GPU"></a>3. GPU</h4><ul><li>目的</li><li>nvidia-smi 查看GPU使用情况</li><li>watch -n 1 nvidia-smi：每秒钟刷新GPU使用情况</li><li>sudo fuser -v /dev/nvidia* 查看GPU使用者</li><li>sudo kill -9 PID 杀掉进程</li><li>CUDA_VISIBLE_DEVICES=0 python xxx.py 指定GPU0</li><li>CUDA_VISIBLE_DEVICES=0,1 python xxx.py 指定GPU0和1</li><li>CUDA_VISIBLE_DEVICES=“” python xxx.py 不使用GPU</li><li>python xxx.py &gt; train.log &amp;    把输出放入train.log（&gt;）; 不显示输出（&amp;）</li><li>CPU &amp; GPU</li><li>top</li><li>htop</li><li><a href="https://xiaoyufenfei.github.io/2019/08/26/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0GPU%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#more">深度学习GPU环境搭建全家桶</a></li></ul><h4 id="4-Screen"><a href="#4-Screen" class="headerlink" title="4. Screen"></a>4. Screen</h4><ul><li>目的：关闭当前Terminal/命令窗口，程序依然进行。</li><li>screen -S name 创建screen，并进入</li><li>screen -ls 查看screen列表</li><li>screen -r name 进入screen</li><li>ctrl+A+D 退出当前screen</li><li>screen -d name 关闭screen</li><li>screen -X -S name kill 删除screen</li></ul><h4 id="5-Virtualenv"><a href="#5-Virtualenv" class="headerlink" title="5. Virtualenv"></a>5. Virtualenv</h4><ul><li>目的</li><li><a href="https://tensorlayer.readthedocs.io/en/latest/user/installation.html" target="_blank" rel="noopener">Installation</a></li><li>pip3 install virtualenv 安装virtualenv</li><li>virtualenv env 新建环境</li><li>source env/bin/activate 进入环境</li><li>deactivate 退出环境</li></ul><h4 id="6-文档"><a href="#6-文档" class="headerlink" title="6. 文档"></a>6. 文档</h4><ul><li><a href="https://guides.github.com/features/mastering-markdown/" target="_blank" rel="noopener">Markdown</a></li><li><a href="https://www.typora.io/" target="_blank" rel="noopener"><strong>Typora</strong></a></li><li><a href="https://readthedocs.org" target="_blank" rel="noopener">Readthedoc</a><ul><li><a href="https://github.com/tensorlayer/tensorlayer/tree/master/docs" target="_blank" rel="noopener">https://github.com/tensorlayer/tensorlayer/tree/master/docs</a></li><li><a href="https://tensorlayer.readthedocs.io" target="_blank" rel="noopener">https://tensorlayer.readthedocs.io</a></li></ul></li><li><a href="https://thomas-cokelaer.info/tutorials/sphinx/rest_syntax.html" target="_blank" rel="noopener">RST and Sphinx syntax</a></li></ul><h4 id="7-远程连接"><a href="#7-远程连接" class="headerlink" title="7. 远程连接"></a>7. 远程连接</h4><ul><li>MacOS - <a href="https://cyberduck.io" target="_blank" rel="noopener">Cyberduck</a></li><li>Windows - <a href="https://mobaxterm.mobatek.net" target="_blank" rel="noopener">MobaXterm</a></li><li><a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="noopener">PyCharm</a></li><li><a href="https://www.teamviewer.cn/cn/" target="_blank" rel="noopener">TeamViewer</a></li></ul><h4 id="8-TensorLayer"><a href="#8-TensorLayer" class="headerlink" title="8. TensorLayer"></a>8. TensorLayer</h4><ul><li><p><a href="https://tensorlayer.readthedocs.io/en/latest/user/installation.html" target="_blank" rel="noopener">Installation</a></p><ul><li><blockquote><p><a href="https://tensorlayer.readthedocs.io/en/latest/user/get_start_model.html" target="_blank" rel="noopener">Dynamic and Static Models</a>  、    <a href="https://tensorlayer.readthedocs.io/en/latest/user/get_start_advance.html" target="_blank" rel="noopener">Advanced Features</a>   、   <a href="https://tensorlayer.readthedocs.io/en/latest/modules/prepro.html#python-can-be-fast" target="_blank" rel="noopener">Data Augmentation</a></p></blockquote></li></ul></li><li><p><a href="https://github.com/tensorlayer/tensorlayer/tree/master/examples/basic_tutorials" target="_blank" rel="noopener">Basic Tutorials</a> CIFAR10 has data augmentation</p></li><li><p><a href="https://github.com/tensorlayer/srgan" target="_blank" rel="noopener">A Good Project Template</a></p></li><li><p>RL Tutorials <a href="https://github.com/tensorlayer/tensorlayer/tree/master/examples/reinforcement_learning" target="_blank" rel="noopener">for Research</a> / <a href="https://github.com/tensorlayer/RLzoo" target="_blank" rel="noopener">for Production</a></p></li><li><p><a href="https://github.com/awwong1/torchprof" target="_blank" rel="noopener">PyTorch深度网络逐层性能分析器</a></p></li></ul><h4 id="9-Deep-Learning-等"><a href="#9-Deep-Learning-等" class="headerlink" title="9. Deep Learning 等"></a>9. Deep Learning 等</h4><ul><li><p><a href="https://nips.cc/Conferences/2019/PaperInformation/SubjectAreas" target="_blank" rel="noopener">NIPS 19 Subject Areas</a></p></li><li><p><a href="http://cvpr2019.thecvf.com/files/CVPR_2019_Program_Guide.pdf" target="_blank" rel="noopener">CVPR 19 Program Guide</a></p></li><li><p><a href="http://openaccess.thecvf.com/CVPR2019.py" target="_blank" rel="noopener">CVPR 19 Paper list</a> / <a href="https://github.com/hoya012/CVPR-2019-Paper-Statistics/blob/master/2019_cvpr/cvpr_2019_oral.csv" target="_blank" rel="noopener">oral list</a></p></li><li><p><a href="https://www.youtube.com/watch?v=iDUNc5YRtzk" target="_blank" rel="noopener">SIGGRAPH 19 Technical Papers Fast Forward</a>/ <a href="http://kesen.realtimerendering.com/sig2019.html" target="_blank" rel="noopener">Paper List</a></p></li><li><p><a href="https://github.com/zsdonghao/deep-learning-note" target="_blank" rel="noopener">zsdonghao/deep-learning-note</a></p></li><li><p><a href="https://blog.skymind.ai/distributed-deep-learning-part-1-an-introduction-to-distributed-training-of-neural-networks/" target="_blank" rel="noopener">Distributed Training</a></p></li><li><p><a href="https://github.com/tqchen/tinyflow" target="_blank" rel="noopener">TingFlow</a> 教学性DL框架</p></li><li><p>模型结构可视化神器 - <a href="https://github.com/lutzroeder/Netron" target="_blank" rel="noopener">Netron</a></p><ul><li><blockquote><p><strong>线Netron网址</strong>: <a href="https://lutzroeder.github.io/netron/" target="_blank" rel="noopener">https://lutzroeder.github.io/netron/</a></p></blockquote></li></ul></li></ul><h4 id="10-Publishing-Paper"><a href="#10-Publishing-Paper" class="headerlink" title="10. Publishing Paper"></a>10. Publishing Paper</h4><ul><li><a href="https://aideadlin.es/?sub=ML,CV,NLP,RO,SP,DM" target="_blank" rel="noopener">Conference DDL</a></li><li><a href="https://app.grammarly.com" target="_blank" rel="noopener">Grammarly</a> 查语法错误</li><li><a href="http://overleaf.com" target="_blank" rel="noopener">Overleaf</a> 协同编辑</li><li>LaTeX: <a href="http://www.tug.org/mactex/downloading.html" target="_blank" rel="noopener">MacTex</a> </li><li><a href="https://www.latexstudio.net/page/texsoftware/" target="_blank" rel="noopener">TeXLive + TexStudio等软件资源站点</a></li><li>Best tool for using LaTeX locally: <a href="https://code.visualstudio.com/" target="_blank" rel="noopener">VSCode</a> + <a href="https://marketplace.visualstudio.com/items?itemName=James-Yu.latex-workshop" target="_blank" rel="noopener">LaTeX Workshop</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 科研工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科研工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习GPU环境搭建-上篇</title>
      <link href="/2019/08/26/shen-du-xue-xi-gpu-huan-jing-da-jian-shang-pian/"/>
      <url>/2019/08/26/shen-du-xue-xi-gpu-huan-jing-da-jian-shang-pian/</url>
      
        <content type="html"><![CDATA[<blockquote><p>为了加速神经网络的训练，使用CPU训练速度很慢，所以使用CUDA和cuDNN对神经网络进行加速，在配置的过程中你会遇到很多坑，各种坑，网上也有很多教程但是实现起来各种ERROR，真心觉得累，经过多次实验做如下超全总结！！！</p></blockquote><h4 id="本节详细说明一下深度学习环境配置，深度学习GPU环境搭建全家桶"><a href="#本节详细说明一下深度学习环境配置，深度学习GPU环境搭建全家桶" class="headerlink" title="本节详细说明一下深度学习环境配置，深度学习GPU环境搭建全家桶"></a>本节详细说明一下深度学习环境配置，深度学习GPU环境搭建全家桶</h4><a id="more"></a> <blockquote><p><strong>注意：RTX 2080 Ti显卡的环境安装过程略有不同，RTX 2080Ti，CUDA要安装10以上，请参考下篇博文。</strong></p></blockquote><h4 id="Python-3-6"><a href="#Python-3-6" class="headerlink" title="Python 3.6"></a>Python 3.6</h4><p>首先安装 Python 3.6，这里使用 Anaconda 3 来安装，下载地址：<a href="https://www.anaconda.com/download/#linux，点击" target="_blank" rel="noopener">https://www.anaconda.com/download/#linux，点击</a> Download 按钮下载即可，这里下载的是 Anaconda 3-5.1 版本，如果下载速度过慢,强烈建议选择使用<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/" target="_blank" rel="noopener">清华镜像</a> 。</p><p>下载下来之后目录下会出现一个 Anaconda3-5.1.0-Linux-x86_64.sh 文件，然后直接执行即可安装：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">bash</span> Anaconda3-5.1.0-Linux-x86_64.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行完毕之后按照默认设置走下来即可完成安装。</p><p>这里默认它会安装到用户目录下，如果想全局安装，可以在这一步输入你要安装的地址：</p><pre class="line-numbers language-bash"><code class="language-bash">Anaconda3 will now be installed into this location:/home/wy/anaconda3  - Press ENTER to confirm the location  - Press CTRL-C to abort the installation  - Or specify a different location below<span class="token punctuation">[</span>/home/wy/anaconda3<span class="token punctuation">]</span> <span class="token operator">>></span><span class="token operator">></span> /usr/local/anaconda3PREFIX<span class="token operator">=</span>/usr/local/anaconda3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我指定了将其安装到 /usr/local/anaconda3 目录下，全局安装，所有用户共享，当然如果只想本用户使用的话使用默认配置即可。</p><p>安装完成之后添加 python3 和 pip3 的软链接：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">ln</span> -s /usr/local/anaconda3/bin/python3 /usr/local/sbin/python3<span class="token function">sudo</span> <span class="token function">ln</span> -s /usr/local/anaconda3/bin/pip /usr/local/sbin/pip3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里是将软连接其添加到 /usr/local/sbin 目录下了，它默认会存在于环境变量中，因此可以直接调用。</p><p>当然也可以选择把 /usr/local/anaconda3/bin 目录添加到环境变量中，具体地，可以修改 ~/.bashrc 文件，添加如下内容：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">export</span> PATH<span class="token operator">=</span>/usr/local/anaconda3/bin<span class="token variable">${PATH:+:${PATH}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后执行：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">source</span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即可生效，下次登录时也会默认执行 ~/.bashrc 文件，也会生效。</p><p>接下来我们验证下 python3、pip3 命令是否都来自 Anaconda，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">pip3 -Vpip 9.0.1 from /usr/local/anaconda3/lib/python3.6/site-packages <span class="token punctuation">(</span>python 3.6<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">which</span> python3/usr/local/anaconda3/bin/python3python3Python 3.6.4 <span class="token operator">|</span>Anaconda, Inc.<span class="token operator">|</span> <span class="token punctuation">(</span>default, Jan 16 2018, 18:10:19<span class="token punctuation">)</span> <span class="token punctuation">[</span>GCC 7.2.0<span class="token punctuation">]</span> on linuxType <span class="token string">"help"</span>, <span class="token string">"copyright"</span>, <span class="token string">"credits"</span> or <span class="token string">"license"</span> <span class="token keyword">for</span> <span class="token function">more</span> information.<span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果输入 pip3 和 python3 命令能出现如上类似结果，路径都在 /usr/local/anaconda3，就证明 Python 3 安装成功了。</p><h4 id="安装驱动"><a href="#安装驱动" class="headerlink" title="安装驱动"></a>安装驱动</h4><p>首先查看一下自己的电脑需要怎样的驱动，我们可以先到 <a href="http://www.nvidia.com/Download/index.aspx" target="_blank" rel="noopener">http://www.nvidia.com/Download/index.aspx</a> 查询下我们需要的是怎样的驱动，这里我的显卡是 GTX 1080，所以以此为例说明，勾选好对应的配置：</p><p>点击 Search，可以看到查询结果如下所示：</p><pre class="line-numbers language-bash"><code class="language-bash">Version:    390.25Release Date:    2018.1.29Operating System:    Linux 64-bitLanguage:    English <span class="token punctuation">(</span>US<span class="token punctuation">)</span>File Size:    77.48 MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里说明我们需要的版本是 <code>390.25</code>。</p><p>接下来如果我们之前安装了驱动的话，可以重新安装一下，如果当前已经安装好了就不必了。</p><p>如果要重装，需要首先卸载掉之前的显卡驱动，以下操作都需要在命令界面操作，执行<code>Ctrl-Alt+F1</code>快捷键进入命令界面:</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> remove –purge nvidia*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行之后 NVIDIA 的一些驱动就被卸载了。</p><p>这时候 nvidia-smi 等命令已经不能用了，这就证明显卡驱动已经被卸载了。</p><p>然后接下来添加一个 PPA 源，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> add-apt-repository ppa:graphics-drivers/ppa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后更新一下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>随后重新安装显卡驱动：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> nvidia-390<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意这里的 <code>390</code> 就是刚才我们查询出来的版本，以实际查询出来的版本为准。</p><h4 id="CUDA-9-0"><a href="#CUDA-9-0" class="headerlink" title="CUDA 9.0"></a>CUDA 9.0</h4><p>如果存在之前的旧版本，可以选择先卸载，以免和新的 CUDA 版本产生冲突，如果之前安装了CUDA 8.0在 /usr/local/cuda-8.0/bin 目录下有一个 uninstall_cuda*.pl 文件，可以直接运行卸载，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> ./uninstall_cuda_*.pl或<span class="token function">sudo</span> /usr/local/cuda-8.0/bin/uninstall_cuda_8.0.pl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>卸载之后，还有一些残留的文件夹，之前安装的是CUDA 8.0，可以一并删除：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">rm</span> -r /usr/local/cuda-8.0/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样即可将 CUDA 全部卸载。</p><p>接下来我们再下载 CUDA 9.0，注意 TensorFlow 1.5 和 1.6 版本依然只是兼容 CUDA 9.0，没有兼容 CUDA 9.1，所以不要下载 9.1，CUDA 9.0 的下载地址是：<a href="https://developer.nvidia.com/cuda-90-download-archive，然后依次勾选好系统的版本" target="_blank" rel="noopener">https://developer.nvidia.com/cuda-90-download-archive，然后依次勾选好系统的版本</a>.</p><p>这里我们选择 Linux-x86_64-Ubuntu-16.04-runfile 的配置，然后点击 Base Installer 部分的 Download 按钮，下载 CUDA 9.0 安装包。</p><p>对应的下载命令是：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">wget</span> https://developer.nvidia.com/compute/cuda/9.0/Prod/local_installers/cuda_9.0.176_384.81_linux-run<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行此命令，等待下载完成即可。</p><p>接下来执行安装，运行如下命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">bash</span> cuda_9.0.176_384.81_linux-run<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装过程需要输入一些确认选项，过程如下：</p><pre class="line-numbers language-bash"><code class="language-bash">DescriptionThe NVIDIA CUDA Toolkit provides command-line and graphicaltools <span class="token keyword">for</span> building, debugging and optimizing the performanceDo you accept the previously <span class="token function">read</span> EULA?（是否同意条款，必须同意才能继续安装）accept/decline/quit: accept（这里不要安装驱动，因为已经安装最新的驱动了，否则可能会安装旧版本的显卡驱动，导致重复登录） Install NVIDIA Accelerated Graphics Driver <span class="token keyword">for</span> Linux-x86_64 384.81?<span class="token punctuation">(</span>y<span class="token punctuation">)</span>es/<span class="token punctuation">(</span>n<span class="token punctuation">)</span>o/<span class="token punctuation">(</span>q<span class="token punctuation">)</span>uit: nInstall the CUDA 9.0 Toolkit? （是否安装CUDA 9 ，这里必须要安装）<span class="token punctuation">(</span>y<span class="token punctuation">)</span>es/<span class="token punctuation">(</span>n<span class="token punctuation">)</span>o/<span class="token punctuation">(</span>q<span class="token punctuation">)</span>uit: yEnter Toolkit Location   （安装路径，使用默认，直接回车就行） <span class="token punctuation">[</span> default is /usr/local/cuda-9.0 <span class="token punctuation">]</span>: Do you want to <span class="token function">install</span> a symbolic <span class="token function">link</span> at /usr/local/cuda?  （同意创建软链接）<span class="token punctuation">(</span>y<span class="token punctuation">)</span>es/<span class="token punctuation">(</span>n<span class="token punctuation">)</span>o/<span class="token punctuation">(</span>q<span class="token punctuation">)</span>uit: yInstall the CUDA 9.0 Samples?  （安装测试）<span class="token punctuation">(</span>y<span class="token punctuation">)</span>es/<span class="token punctuation">(</span>n<span class="token punctuation">)</span>o/<span class="token punctuation">(</span>q<span class="token punctuation">)</span>uit: yEnter CUDA Samples Location    （安装路径，使用默认，直接回车就行） <span class="token punctuation">[</span> default is /home/cqc <span class="token punctuation">]</span>: Installing the CUDA Toolkit <span class="token keyword">in</span> /usr/local/cuda-9.0 <span class="token punctuation">..</span>.  （开始安装）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后如果出现这样的提示，就证明 CUDA 安装好了：</p><pre class="line-numbers language-bash"><code class="language-bash">Driver:   Not SelectedToolkit:  Installed <span class="token keyword">in</span> /usr/local/cuda-9.0Samples:  Installed <span class="token keyword">in</span> /home/cqc, but missing recommended librariesPlease <span class="token function">make</span> sure that -   PATH includes /usr/local/cuda-9.0/bin -   LD_LIBRARY_PATH includes /usr/local/cuda-9.0/lib64, or, add /usr/local/cuda-9.0/lib64 to /etc/ld.so.conf and run ldconfig as rootTo uninstall the CUDA Toolkit, run the uninstall script <span class="token keyword">in</span> /usr/local/cuda-9.0/binPlease see CUDA_Installation_Guide_Linux.pdf <span class="token keyword">in</span> /usr/local/cuda-9.0/doc/pdf <span class="token keyword">for</span> detailed information on setting up CUDA.***WARNING: Incomplete installation<span class="token operator">!</span> This installation did not <span class="token function">install</span> the CUDA Driver. A driver of version at least 384.00 is required <span class="token keyword">for</span> CUDA 9.0 functionality to work.To <span class="token function">install</span> the driver using this installer, run the following command, replacing <span class="token operator">&lt;</span>CudaInstaller<span class="token operator">></span> with the name of this run file:    <span class="token function">sudo</span> <span class="token operator">&lt;</span>CudaInstaller<span class="token operator">></span>.run -silent -driver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们需要配置一下环境变量，更改 ~/.bashrc 文件，添加如下几行：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">export</span> PATH<span class="token operator">=</span>/usr/local/cuda/bin<span class="token variable">${PATH:+:${PATH}</span><span class="token punctuation">}</span><span class="token function">export</span> LD_LIBRARY_PATH<span class="token operator">=</span>/usr/local/cuda/lib64<span class="token variable">${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}</span><span class="token punctuation">}</span><span class="token function">export</span> CUDA_HOME<span class="token operator">=</span>/usr/local/cuda<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改完毕之后执行一下使其生效：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">source</span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这时我们输出 CUDA_HOME、LD_LIBRARY_PATH 就可以看到对应的输出了：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token variable">$CUDA_HOME</span>/usr/local/cuda<span class="token keyword">echo</span> <span class="token variable">$LD_LIBRARY_PATH</span>/usr/local/cuda/lib64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">nvcc -V<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者：</p><pre class="line-numbers language-bash"><code class="language-bash">nvidia-smi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就代表环境变量生效了，CUDA 安装完成。</p><h4 id="cuDNN-7-1"><a href="#cuDNN-7-1" class="headerlink" title="cuDNN 7.1"></a>cuDNN 7.1</h4><p>cuDNN 的全称是 The NVIDIA CUDA® Deep Neural Network library，是专门用来对深度学习加速的库，它支持 Caffe2, MATLAB, Microsoft Cognitive Toolkit, TensorFlow, Theano 及 PyTorch 等深度学习的加速优化，目前最新版本是 cuDNN 7.1，接下来我们来看下它的安装方式。</p><p>下载链接：<a href="https://developer.nvidia.com/rdp/cudnn-download，或者" target="_blank" rel="noopener">https://developer.nvidia.com/rdp/cudnn-download，或者</a> <a href="http://iphil.cc/?p=541" target="_blank" rel="noopener">cuDNN Download</a>   需要注册之后才能打开，这里我们选择 cuDNN v7.1.1 (Feb 28, 2018), for CUDA 9.0，然后选择 cuDNN v7.1.1 Library for Linux：</p><p>下载下来之后解压安装即可：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> -zxvf cudnn-9.0-linux-x64-v7.1.tgz<span class="token function">sudo</span> <span class="token function">cp</span> cuda/include/cudnn.h /usr/local/cuda/include/<span class="token function">sudo</span> <span class="token function">cp</span> cuda/lib64/libcudnn* /usr/local/cuda/lib64/ -d<span class="token function">sudo</span> <span class="token function">chmod</span> a+r /usr/local/cuda/include/cudnn.h<span class="token function">sudo</span> <span class="token function">chmod</span> a+r /usr/local/cuda/lib64/libcudnn*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行完如上命令之后，cuDNN 就安装好了，这时我们可以发现在 /usr/local/cuda/include 目录下就多了 cudnn.h 头文件。</p><h4 id="ubuntu16-04查看CUDA和cuDNN版本"><a href="#ubuntu16-04查看CUDA和cuDNN版本" class="headerlink" title="ubuntu16.04查看CUDA和cuDNN版本"></a>ubuntu16.04查看CUDA和cuDNN版本</h4><p>cuda版本查看:</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cat</span> /usr/local/cuda/version.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>cudnn版本查看:</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cat</span> /usr/local/cuda/include/cudnn.h <span class="token operator">|</span> <span class="token function">grep</span> CUDNN_MAJOR -A 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="TensorFlow-1-8"><a href="#TensorFlow-1-8" class="headerlink" title="TensorFlow 1.8"></a>TensorFlow 1.8</h4><p>到现在为止 Python 3.6、CUDA 9.0 和 cuDNN 7.1 就已经安装好了，而且环境变量也配置好了，接下来我们直接安装 TensorFlow 1.8 即可，TensorFlow 1.8 版本针对 CUDA 9 和 cuDNN 7 做了优化，可以预构建二进制文件。</p><p>这里需要安装的是 TensorFlow 的 GPU 版本，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">pip3 <span class="token function">install</span> tensorflow-gpu<span class="token operator">==</span>1.8.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你会发现上面安装特别慢，强烈建议使用 <a href="https://mirrors.tuna.tsinghua.edu.cn/help/pypi/" target="_blank" rel="noopener">国内pypi源加速</a> , 速度超快啊！！！</p><pre class="line-numbers language-bash"><code class="language-bash">pip3 <span class="token function">install</span> tensorflow-gpu<span class="token operator">==</span>1.8.0 -i https://pypi.tuna.tsinghua.edu.cn/simple<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成之后验证一下：</p><pre class="line-numbers language-python"><code class="language-python">python<span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tftf<span class="token punctuation">.</span>__version__tf<span class="token punctuation">.</span>__path__<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果没有报错，那就证明全部环境配置都成功了。</p><p>如果您的tensorflow安装后不能使用，请考虑<strong>tensorflow版本和CUDA、cuDNN版本的兼容问题</strong>，请自行百度，也可参考本博文下方链接。。</p><h4 id="Pytorch-1-1"><a href="#Pytorch-1-1" class="headerlink" title="Pytorch 1.1"></a>Pytorch 1.1</h4><p>pytorch官网：<a href="https://pytorch.org/" target="_blank" rel="noopener">https://pytorch.org/</a> </p><p>打开官网，可以按照选择安装方式（pip , conda, source）和 python版本，cuda版本来进行安装，由于特殊的网络国情，一般是打不开，或者是无法查看 run the command 之后的指令的。</p><p>你会发现上面安装特别慢，强烈建议使用 <a href="https://mirrors.tuna.tsinghua.edu.cn/help/pypi/" target="_blank" rel="noopener">国内pypi源加速</a> , 速度超快啊！！！</p><pre class="line-numbers language-bash"><code class="language-bash">pip3 <span class="token function">install</span> torch<span class="token operator">==</span>1.1.0 torchvision<span class="token operator">==</span>0.3.0 -i https://pypi.tuna.tsinghua.edu.cn/simple<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果已经安装torch，仅仅想更新环境，pip升级torch命令如下，注意，<strong>如果不像上面指定版本，将更到最新版本！</strong>：</p><pre class="line-numbers language-bash"><code class="language-bash">pip3 <span class="token function">install</span> --upgrade torch torchvision -i https://pypi.tuna.tsinghua.edu.cn/simple<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://www.pytorchtutorial.com/pytorch-installation-commands/" target="_blank" rel="noopener">安装pytorch命令合集</a>.</p><h4 id="配置-ssh-远程连接"><a href="#配置-ssh-远程连接" class="headerlink" title="配置 ssh 远程连接"></a>配置 ssh 远程连接</h4><p>1）安装 open-ssh</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> openssh-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2）修改权限，允许 ssh 登录 root</p><pre class="line-numbers language-bash"><code class="language-bash">gedit /etc/ssh/sshd_config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注释 ：<code>PermitRootLogin prohibit-password</code><br>添加： <code>PermitRootLogin yes</code></p><p>3）重启 ssh</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">service</span> <span class="token function">ssh</span> restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="设置Ubuntu-16-04-允许进行远程控制"><a href="#设置Ubuntu-16-04-允许进行远程控制" class="headerlink" title="设置Ubuntu 16.04 允许进行远程控制"></a>设置Ubuntu 16.04 允许进行远程控制</h4><p>请参考 <a href="https://www.cnblogs.com/xuliangxing/p/7642650.html" target="_blank" rel="noopener">VNC实现Windows远程访问Ubuntu 16.04（无需安装第三方桌面,直接使用自带远程工具）</a> .</p><h4 id="Windows全能终端神器MobaXterm安装"><a href="#Windows全能终端神器MobaXterm安装" class="headerlink" title="Windows全能终端神器MobaXterm安装"></a>Windows全能终端神器MobaXterm安装</h4><p><a href="https://mobaxterm.mobatek.net/" target="_blank" rel="noopener">主要功能</a>：</p><blockquote><p>支持各种连接SSH，X11，RDP，VNC，FTP，MOSH<br>支持Unix命令（bash，ls，cat，sed，grep，awk，rsync，…）<br>连接SSH终端后支持SFTP传输文件<br>各种丰富的插件（git/dig/aria2…）<br>可运行Windows或软件</p></blockquote><p><a href="https://mobaxterm.mobatek.net/download-home-edition.html" target="_blank" rel="noopener">官网下载地址</a> </p><h4 id="No-module-named-‘cv2’等python库解决方法"><a href="#No-module-named-‘cv2’等python库解决方法" class="headerlink" title="No module named ‘cv2’等python库解决方法"></a>No module named ‘cv2’等python库解决方法</h4><p>只要是缺少的python库文件，请善用 <a href="https://mirrors.tuna.tsinghua.edu.cn/help/pypi/" target="_blank" rel="noopener">国内pypi源加速</a> , 速度超快啊！！！</p><pre class="line-numbers language-bash"><code class="language-bash">pip3 <span class="token function">install</span> opencv-python -i https://pypi.tuna.tsinghua.edu.cn/simple<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Python包更新方法"><a href="#Python包更新方法" class="headerlink" title="Python包更新方法"></a>Python包更新方法</h4><p>当你需要更新python包时，还是那句话，请善用 <a href="https://mirrors.tuna.tsinghua.edu.cn/help/pypi/" target="_blank" rel="noopener">国内pypi源加速</a> , 速度超快啊！！！</p><p>如：我当前需要更新pip</p><pre class="line-numbers language-bash"><code class="language-bash">pip <span class="token function">install</span> --upgrade pip -i https://pypi.tuna.tsinghua.edu.cn/simple<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Ubuntu下python开发IDE专业版Pycharm的安装"><a href="#Ubuntu下python开发IDE专业版Pycharm的安装" class="headerlink" title="Ubuntu下python开发IDE专业版Pycharm的安装"></a>Ubuntu下python开发IDE专业版Pycharm的安装</h4><p>请自行百度，可参考 <a href="https://blog.csdn.net/CAU_Ayao/article/details/80578600" target="_blank" rel="noopener">https://blog.csdn.net/CAU_Ayao/article/details/80578600</a> 进行安装。</p><h4 id="Ubuntu下Markdown编辑器Typora的安装"><a href="#Ubuntu下Markdown编辑器Typora的安装" class="headerlink" title="Ubuntu下Markdown编辑器Typora的安装"></a>Ubuntu下Markdown编辑器Typora的安装</h4><blockquote><p>一个优雅的markdown编辑器，支持mac，windows，linux全平台，是一款<strong>支持实时预览的 Markdown 文本编辑器 ，完全免费</strong>。</p></blockquote><p><a href="https://www.typora.io/" target="_blank" rel="noopener">官方下载地址</a>     |         <a href="https://blog.csdn.net/cris_zz/article/details/82919401" target="_blank" rel="noopener">史上最完美的 Typora 教程</a></p><h4 id="TeamViewer-远程控制桌面工具安装"><a href="#TeamViewer-远程控制桌面工具安装" class="headerlink" title="TeamViewer 远程控制桌面工具安装"></a>TeamViewer 远程控制桌面工具安装</h4><blockquote><p><a href="https://www.teamviewer.cn/cn/" target="_blank" rel="noopener">TeamViewer</a>主要是用来连实验室的电脑，也可以用用 <a href="https://anydesk.com/zhs" target="_blank" rel="noopener">AnyDesk</a>, 两个都是全平台的.</p></blockquote><p>1.官网下载安装包</p><p>网址：<a href="https://www.teamviewer.com/cn/download/linux/" target="_blank" rel="noopener">https://www.teamviewer.com/cn/download/linux/</a><br>下载<code>amd64</code>版本</p><p>2.安装</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> dpkg -i teamviewer_14.1.3399_amd64.deb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.问题解决</p><p>可能存在依赖问题，安装不了，终端输入：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> apt <span class="token function">install</span> -f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重新输入：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> dpkg -i teamviewer_14.1.3399_amd64.deb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>问题解决！</p><p>以上便是 <code>Ubuntu 16.04 + Nvidia GTX 1080 + Python 3.6 + CUDA 9.0 + cuDNN 7.1 + TensorFlow 1.8 + Pytorch 1.1 + ssh远程连接设置+ Ubunt桌面远程控制</code>等 完整环境配置过程。</p><blockquote><p><strong>注意：RTX 2080 Ti显卡的环境安装过程略有不同，RTX 2080Ti，CUDA要安装10以上。</strong></p></blockquote><p>当您程序报错：</p><pre class="line-numbers language-bash"><code class="language-bash">THCudaCheck FAIL file<span class="token operator">=</span>/pytorch/aten/src/THC/THCGeneral.cpp line<span class="token operator">=</span>405 error<span class="token operator">=</span>11 <span class="token keyword">:</span> invalid argument<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>原因：显卡用的RTX 2080Ti，CUDA就要装10以上，</p><p><strong>方案一：</strong> <strong>通过pytorch官发链接pip装</strong>，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">pip3 <span class="token function">install</span> https://download.pytorch.org/whl/cu100/torch-1.0.0-cp36-cp36m-linux_x86_64.whl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现速度实在太慢！！于是我们考虑</p><p><strong>方案二：</strong> <strong>离线安装</strong>：</p><p>注意方案一 <strong>在控制台出现的下载路径</strong>，复制到浏览器，手动下载：</p><p>如，到指定路径下载torch1.0：<a href="https://download.pytorch.org/whl/cu100/torch-1.0.0-cp36-cp36m-linux_x86_64.whl" target="_blank" rel="noopener">https://download.pytorch.org/whl/cu100/torch-1.0.0-cp36-cp36m-linux_x86_64.whl</a> ，将本地文件上传到服务器指定位置，路径换到压缩包所在位置，在控制台输入指令：</p><pre class="line-numbers language-bash"><code class="language-bash">pip3 <span class="token function">install</span> torch-1.0.0-cp36-cp36m-linux_x86_64.whlpip3 <span class="token function">install</span> torchvision<span class="token operator">==</span>0.2.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>方案三：</strong> <strong>以上两种方案纯属呵呵</strong>🙂，强烈建议使用 <a href="https://mirrors.tuna.tsinghua.edu.cn/help/pypi/" target="_blank" rel="noopener"><strong>国内pypi源加速</strong></a> , 直接安装pytorch最新版本，最新版本做了诸多优化！<strong>通过pypi镜像安装</strong>速度超快啊  ★★★★★</p><pre class="line-numbers language-bash"><code class="language-bash">pip3 <span class="token function">install</span> torch torchvision -i https://pypi.tuna.tsinghua.edu.cn/simple<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就安装好啦，然后测试一下，会输出<code>torch版本1.2.0，torchvision版本0.4.0</code>：</p><pre class="line-numbers language-python"><code class="language-python">python<span class="token keyword">import</span> torch<span class="token punctuation">,</span>torchvisiontorch<span class="token punctuation">.</span>__version__torchvision<span class="token punctuation">.</span>__version__torch<span class="token punctuation">.</span>__path__torchvision<span class="token punctuation">.</span>__path__<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>RTX 2080Ti，CUDA要安装10以上，否则报错，原因详见：</strong></p><ul><li><a href="https://discuss.pytorch.org/t/cuda-runtime-error-11/30080/13" target="_blank" rel="noopener">https://discuss.pytorch.org/t/cuda-runtime-error-11/30080/13</a></li><li><a href="https://github.com/pytorch/pytorch/issues/15797#issuecomment-452021037" target="_blank" rel="noopener">https://github.com/pytorch/pytorch/issues/15797#issuecomment-452021037</a></li></ul><h4 id="国内常见的pypi源"><a href="#国内常见的pypi源" class="headerlink" title="国内常见的pypi源"></a>国内常见的pypi源</h4><pre class="line-numbers language-bash"><code class="language-bash">清华：https://pypi.tuna.tsinghua.edu.cn/simple阿里云：http://mirrors.aliyun.com/pypi/simple/中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/华中理工大学：http://pypi.hustunique.com/山东理工大学：http://pypi.sdutlinux.org/ 豆瓣：http://pypi.douban.com/simple/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="他山之石："><a href="#他山之石：" class="headerlink" title="他山之石："></a>他山之石：</h4><ul><li><a href="https://blog.csdn.net/weixin_42718092/article/details/86016973" target="_blank" rel="noopener">Ubuntu下安装CUDA10.0遇到的问题（一定要注意自己版本）</a></li><li><a href="https://blog.csdn.net/qq_27825451/article/details/89082978" target="_blank" rel="noopener">tensorflow各个版本的CUDA以及Cudnn版本对应关系</a></li><li><a href="https://blog.csdn.net/omodao1/article/details/83241074" target="_blank" rel="noopener">Tensorflow不同版本要求与CUDA及CUDNN版本对应关系</a></li><li><a href="https://blog.csdn.net/CYummy/article/details/88173161" target="_blank" rel="noopener">Ubuntu16.04　安装python3.6和相应的pip3  pytorch1.0</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 深度学习环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 博客搭建指南</title>
      <link href="/2019/08/24/hello-world/"/>
      <url>/2019/08/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a> <h3 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h3><h4 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h4><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h4 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h4><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h4 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h4><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h4 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h4><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><p>Hexo的简洁、神秘让我跃跃欲试，在使用过程中遇到了很多问题，整理此文，一是方便其他技术人搭建自己的博客，二是给自己的学习之旅做个总结。</p><blockquote><p>Hexo 有两份主要的配置文件（_config.yml），一份位于站点根目录下，另一份位于主题目录下。为了描述方便，在以下说明中，将前者称为站点配置文件，后者称为主题配置文件。</p></blockquote><h3 id="1-Hexo介绍"><a href="#1-Hexo介绍" class="headerlink" title="1 Hexo介绍"></a>1 Hexo介绍</h3><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>是基于<code>NodeJs</code>的静态博客框架，简单、轻量，其生成的静态网页可以托管在<code>Github</code>和<code>Heroku</code>上。</p><ul><li>超快速度</li><li>支持MarkDown</li><li>一键部署</li><li>丰富的插件</li></ul><blockquote><p>下面以我的博客为例，xiaoming.github.io</p></blockquote><h3 id="2-环境准备"><a href="#2-环境准备" class="headerlink" title="2 环境准备"></a>2 环境准备</h3><h4 id="2-0-安装git"><a href="#2-0-安装git" class="headerlink" title="2.0 安装git"></a>2.0 安装git</h4><p>Git for Windows, 这里提供一个国内的下载站，方便网友下载，然后选择安装目录后，一直next就可以。<a href="https://github.com/waylau/git-for-win" target="_blank" rel="noopener">https://github.com/waylau/git-for-win</a></p><h4 id="2-1-安装node-js"><a href="#2-1-安装node-js" class="headerlink" title="2.1 安装node.js"></a>2.1 安装node.js</h4><p>去<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">nodejs官网</a>下载对应系统的安装包，然后一直一直next安装。</p><p>检验安装成功：</p><pre class="line-numbers language-bash"><code class="language-bash">$ node -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-2-安装hexo"><a href="#2-2-安装hexo" class="headerlink" title="2.2 安装hexo"></a>2.2 安装hexo</h4><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：Mac系统，则需要  </p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> hexo-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-利用Hexo搭建一个博客"><a href="#3-利用Hexo搭建一个博客" class="headerlink" title="3 利用Hexo搭建一个博客"></a>3 利用Hexo搭建一个博客</h3><h4 id="3-1-创建博客目录xiaoming-github-io"><a href="#3-1-创建博客目录xiaoming-github-io" class="headerlink" title="3.1 创建博客目录xiaoming.github.io"></a>3.1 创建博客目录<code>xiaoming.github.io</code></h4><pre class="line-numbers language-bash"><code class="language-bash">$ hexo init xiaoming.github.io$ <span class="token function">cd</span> xiaoming.github.io$ <span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3-2-生成静态页面"><a href="#3-2-生成静态页面" class="headerlink" title="3.2 生成静态页面"></a>3.2 生成静态页面</h4><pre class="line-numbers language-bash"><code class="language-bash">$ hexo clean$ hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>g 即generate</p></blockquote><h4 id="3-3-运行"><a href="#3-3-运行" class="headerlink" title="3.3 运行"></a>3.3 运行</h4><pre class="line-numbers language-bash"><code class="language-bash">$ hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>s 即server</p></blockquote><p>然后打开浏览器，输入地址 <strong>localhost:4000</strong> 即可看到效果</p><h3 id="4-发一篇文章试试"><a href="#4-发一篇文章试试" class="headerlink" title="4 发一篇文章试试"></a>4 发一篇文章试试</h3><h4 id="4-1-命令方式"><a href="#4-1-命令方式" class="headerlink" title="4.1 命令方式"></a>4.1 命令方式</h4><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token function">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时会在<code>source/_posts</code>目录下生成<code>test.md</code>文件，输入些许内容，然后保存.</p><p>生成下，看看效果</p><pre class="line-numbers language-bash"><code class="language-bash">$ hexo clean$ hexo g$ hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>访问 <strong>localhost:4000</strong> 即可</p><h4 id="4-2-直接方式"><a href="#4-2-直接方式" class="headerlink" title="4.2 直接方式"></a>4.2 直接方式</h4><p>在 <strong>source/_posts/</strong>下新建一个<code>.md</code>文件也可</p><h3 id="5-配置"><a href="#5-配置" class="headerlink" title="5 配置"></a>5 配置</h3><p>网站的设置大部分都在<strong>_config.yml</strong>文件中，详细配置可以查看<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="noopener">官方文档</a></p><p>下面只列出简单常用配置</p><ul><li><strong>title</strong> -&gt; 网站标题</li><li><strong>subtitle</strong> -&gt; 网站副标题</li><li><strong>description</strong> -&gt; 网站描述</li><li><strong>author</strong> -&gt; 您的名字</li><li><strong>language</strong> -&gt; 网站使用的语言</li></ul><p>坑：<strong>进行配置时，需要在冒号:后加一个英文空格</strong></p><pre><code>title: xiaoming</code></pre><h3 id="6-换一个好看的主题"><a href="#6-换一个好看的主题" class="headerlink" title="6 换一个好看的主题"></a>6 换一个好看的主题</h3><p>Hexo 中有很多主题，可以在<a href="https://hexo.io/themes/" target="_blank" rel="noopener">官网</a>查看。<br>这里我推荐<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">hexo-theme-next</a>，下面列举更换主题的一般套路：</p><h4 id="6-1-下载主题资源"><a href="#6-1-下载主题资源" class="headerlink" title="6.1 下载主题资源"></a>6.1 下载主题资源</h4><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">git</span> clone https://github.com/iissnan/hexo-theme-next themes/next克隆新地址：$ <span class="token function">git</span> clone https://github.com/theme-next/hexo-theme-next themes/next<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="6-2-应用下载的主题"><a href="#6-2-应用下载的主题" class="headerlink" title="6.2 应用下载的主题"></a>6.2 应用下载的主题</h4><p>在网站配置文件<strong>_config.yml</strong>中，配置<strong>theme</strong></p><pre><code>theme: next</code></pre><blockquote><p>next是主题名称，具体的可查看主题的文档</p></blockquote><h4 id="6-3-主题其他配置"><a href="#6-3-主题其他配置" class="headerlink" title="6.3 主题其他配置"></a>6.3 主题其他配置</h4><p>可在<code>/theme/{theme}/_config.yml</code> 主题的配置文件下进行主题的配置。</p><p>接下来，可以执行万能的调试命令看看效果</p><pre class="line-numbers language-bash"><code class="language-bash">$ hexo clean$ hexo g     <span class="token comment" spellcheck="true">#g 是 generate 缩写:生成，d 是 deploy 缩写:部署</span>$ hexo s     <span class="token comment" spellcheck="true">#s 是 serverce 缩写:启动服务预览</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="7-部署到Github"><a href="#7-部署到Github" class="headerlink" title="7 部署到Github"></a>7 部署到Github</h3><h4 id="7-1-有个github账号xiaoming"><a href="#7-1-有个github账号xiaoming" class="headerlink" title="7.1 有个github账号xiaoming"></a>7.1 有个github账号xiaoming</h4><h4 id="7-2-创建一个xiaoming-github-io的public仓库"><a href="#7-2-创建一个xiaoming-github-io的public仓库" class="headerlink" title="7.2 创建一个xiaoming.github.io的public仓库"></a>7.2 创建一个xiaoming.github.io的public仓库</h4><p>如果您的账户名是xiaoming,则需要创建一个xiaoming.github.io的public仓库.</p><h4 id="7-3-安装-hexo-deployer-git"><a href="#7-3-安装-hexo-deployer-git" class="headerlink" title="7.3 安装 hexo-deployer-git"></a>7.3 安装 <a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">hexo-deployer-git</a></h4><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="7-4-网站配置git"><a href="#7-4-网站配置git" class="headerlink" title="7.4 网站配置git"></a>7.4 网站配置git</h4><p>在网站的<code>_config.yml</code>中配置deploy</p><pre><code>deploy:  type: git  repo: &lt;repository url&gt;  branch: [branch]</code></pre><blockquote><p><code>branch</code>为分支，默认为<code>master</code>,可以不配置<br><code>repo</code>为仓库地址，在github上新建仓库后，可复制此地址</p></blockquote><h4 id="7-5-部署"><a href="#7-5-部署" class="headerlink" title="7.5 部署"></a>7.5 部署</h4><pre class="line-numbers language-bash"><code class="language-bash">$ hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>d 即deploy</p></blockquote><h3 id="8-贴标签，方便搜索"><a href="#8-贴标签，方便搜索" class="headerlink" title="8 贴标签，方便搜索"></a>8 贴标签，方便搜索</h3><h4 id="8-1-两个确认"><a href="#8-1-两个确认" class="headerlink" title="8.1 两个确认"></a>8.1 两个确认</h4><ul><li>确认站点配置文件有 </li></ul><pre><code>tag_dir: tags</code></pre><ul><li>确认主题配置文件有</li></ul><pre><code>tags: tags</code></pre><h4 id="8-2-新建tags页面"><a href="#8-2-新建tags页面" class="headerlink" title="8.2 新建tags页面"></a>8.2 新建tags页面</h4><p>1&gt;运行以下命令</p><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new page tags<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时会在<code>source/</code>下生成<code>tags/index.md</code>文件</p><p>2&gt;修改/source/tags目录下的<code>index.md</code>文件</p><pre><code>title: tagsdate: 2015-10-20 06:49:50type: &quot;tags&quot;comments: false</code></pre><blockquote><p>date 可保持系统生成的时间，</p></blockquote><pre><code>type: &quot;tags&quot;comments: false</code></pre><p>很重要</p><p>3&gt;修改<strong>主题配置文件</strong><br>去掉tags的注释</p><pre><code>menu:  home: /                       #主页  categories: /categories    #分类页（需手动创建）  #about: /about        #关于页面（需手动创建）  archives: /archives        #归档页  tags: /tags            #标签页（需手动创建）  #commonweal: /404.html        #公益 404 （需手动创建）</code></pre><h4 id="8-3-在文章中添加tags"><a href="#8-3-在文章中添加tags" class="headerlink" title="8.3 在文章中添加tags"></a>8.3 在文章中添加tags</h4><p>在文章<code>xx.md</code>中添加：</p><pre><code>tags:     - Tag1    - Tag2    - Tag3</code></pre><p>多个Tag可按上面的格式添加。</p><p>其文件头部类似：</p><pre><code>title: TagEditTextdate: 2016-11-19 10:44:25tags:     - Tag1    - Tag2    - Tag3</code></pre><h3 id="9-分类，给文章归档"><a href="#9-分类，给文章归档" class="headerlink" title="9 分类，给文章归档"></a>9 分类，给文章归档</h3><h4 id="9-1-两个确认"><a href="#9-1-两个确认" class="headerlink" title="9.1 两个确认"></a>9.1 两个确认</h4><ul><li>确认站点配置文件打开了</li></ul><pre><code>category_dir: categories</code></pre><ul><li>确认主题配置文件打开了</li></ul><pre><code>categories: /categories</code></pre><h4 id="9-2-新建categories文件"><a href="#9-2-新建categories文件" class="headerlink" title="9.2 新建categories文件"></a>9.2 新建categories文件</h4><p>1&gt;运行以下命令</p><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new page categories<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时会在<code>source</code>目录下生成<code>categories/index.md</code>文件</p><p>2&gt;修改/source/categories目录下的<code>index.md</code>文件</p><pre><code>title: categoriesdate: 2015-10-20 06:49:50type: &quot;categories&quot;comments: false</code></pre><blockquote><p>date 可保持系统生成的时间，</p></blockquote><pre><code>type: &quot;categories&quot;comments: false</code></pre><p>很重要</p><p>3&gt;修改<strong>主题配置文件</strong><br>去掉categories的注释</p><pre><code>menu:  home: /                       #主页  categories: /categories    #分类页（需手动创建）  #about: /about        #关于页面（需手动创建）  archives: /archives        #归档页  tags: /tags            #标签页（需手动创建）  #commonweal: /404.html        #公益 404 （需手动创建）</code></pre><h4 id="9-3-在文章中添加categories"><a href="#9-3-在文章中添加categories" class="headerlink" title="9.3 在文章中添加categories"></a>9.3 在文章中添加categories</h4><p>在文章xx.md中添加：</p><pre><code>categories:     - cate</code></pre><p>其文件头部类似：</p><pre><code>title: TagEditTextdate: 2016-11-19 10:44:25categories:     - cate</code></pre><h4 id="10-hexo修改文章底部的那个带-号的标签"><a href="#10-hexo修改文章底部的那个带-号的标签" class="headerlink" title="10 hexo修改文章底部的那个带#号的标签"></a>10 hexo修改文章底部的那个带#号的标签</h4><p>实现效果图</p><p><img src="/2019/08/24/hello-world/bottom_tag.png" alt></p><p>具体实现方法:</p><p>修改模板 <code>/themes/next/layout/_macro/post.swig</code>，搜索 <code>rel=&quot;tag&quot;&gt;#</code> 或者 <code>rel=&quot;tag&quot;&gt; </code>，将  # 或者    换成<code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code></p><h4 id="11-Hexo文章置顶的方法"><a href="#11-Hexo文章置顶的方法" class="headerlink" title="11  Hexo文章置顶的方法"></a>11  Hexo文章置顶的方法</h4><p>1&gt; 安装插件:</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> uninstall hexo-generator-index --save<span class="token function">npm</span> <span class="token function">install</span> hexo-generator-index-pin-top --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后在需要置顶的文章的Front-matter中加上top即可：</p><pre class="line-numbers language-bash"><code class="language-bash">title: 2019date: 2019-02-14 16:10:03top: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或者在需要置顶的文章的Front-matter中加上top: true亦可。比如下面这样：</p><pre class="line-numbers language-bash"><code class="language-bash">title: hexo博客置顶date: 2017-09-08 12:00:25categories: 博客搭建系列top: <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>到目前为止，置顶功能已经可以实现了。</p><p>2&gt;设置置顶标志:</p><p>打开：/blog/themes/next/layout/_macro 目录下的post.swig文件，定位到<code>&lt;div class=&quot;post-meta&quot;&gt;</code>标签下，紧接着下一行插入如下代码：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">{</span>% <span class="token keyword">if</span> post.top %<span class="token punctuation">}</span>  <span class="token operator">&lt;</span>i class<span class="token operator">=</span><span class="token string">"fa fa-thumb-tack"</span><span class="token operator">></span><span class="token operator">&lt;</span>/i<span class="token operator">></span>  <span class="token operator">&lt;</span>font color<span class="token operator">=</span><span class="token string">"7D26CD"</span><span class="token operator">></span>置顶<span class="token operator">&lt;</span>/font<span class="token operator">></span>  <span class="token operator">&lt;</span>span class<span class="token operator">=</span><span class="token string">"post-meta-divider"</span><span class="token operator">></span><span class="token operator">|</span><span class="token operator">&lt;</span>/span<span class="token operator">></span><span class="token punctuation">{</span>% endif %<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Hexo常用命令"><a href="#Hexo常用命令" class="headerlink" title="Hexo常用命令"></a>Hexo常用命令</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo n <span class="token string">"博客名称"</span>  <span class="token operator">=</span><span class="token operator">></span> hexo new <span class="token string">"博客名称"</span>   <span class="token comment" spellcheck="true">#这两个都是创建新文章，前者是简写模式</span>$ hexo p  <span class="token operator">=</span><span class="token operator">></span> hexo publish$ hexo g  <span class="token operator">=</span><span class="token operator">></span> hexo generate  <span class="token comment" spellcheck="true">#生成</span>$ hexo s  <span class="token operator">=</span><span class="token operator">></span> hexo server  <span class="token comment" spellcheck="true">#启动服务预览</span>$ hexo d  <span class="token operator">=</span><span class="token operator">></span> hexo deploy  <span class="token comment" spellcheck="true">#部署</span>关于hexo的服务器命令:$ hexo server   <span class="token comment" spellcheck="true">#Hexo 会监视文件变动并自动更新，无须重启服务器。</span>$ hexo server -s   <span class="token comment" spellcheck="true">#静态模式</span>$ hexo server -p 5000   <span class="token comment" spellcheck="true">#更改端口</span>$ hexo server -i 192.168.1.1   <span class="token comment" spellcheck="true">#自定义IP</span>$ hexo clean   <span class="token comment" spellcheck="true">#清除缓存，网页正常情况下可以忽略此条命令</span>$ hexo g   <span class="token comment" spellcheck="true">#生成静态网页</span>$ hexo d   <span class="token comment" spellcheck="true">#开始部署</span>hexo资料网站:https://hexo.io/zh-cn/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 - 创建博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搭建博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
